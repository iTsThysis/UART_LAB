
/Users/darwinwang/Documents/IoT/UART_LAB/target/3.3.0/argon/UART_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003204  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7220  000b7220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7244  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5d0  000b7248  0001e5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b4  2003e63c  2003e63c  0002e63c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b72b4  000b72b4  000272b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b72dc  000b72dc  000272dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011ced7  00000000  00000000  000272e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013c45  00000000  00000000  001441b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003e44e  00000000  00000000  00157dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cd8  00000000  00000000  0019624a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a160  00000000  00000000  00198f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d902  00000000  00000000  001a3082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000468f2  00000000  00000000  001e0984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132452  00000000  00000000  00227276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008138  00000000  00000000  003596c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f98d 	bl	b634c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f995 	bl	b6368 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5d0 	.word	0x2003e5d0
   b4048:	000b7248 	.word	0x000b7248
   b404c:	2003e63c 	.word	0x2003e63c
   b4050:	2003e63c 	.word	0x2003e63c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f845 	bl	b60ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b71f4 	.word	0x000b71f4
   b407c:	000b7218 	.word	0x000b7218

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b820 	b.w	b40c4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f83d 	bl	b4104 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bfe5 	b.w	b605c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 bb4b 	b.w	b572c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f001 bb51 	b.w	b573c <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f001 faa6 	bl	b55f4 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b5325 	.word	0x000b5325
   b40b0:	000b64c4 	.word	0x000b64c4

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <setup>:

#include "oled-wing-adafruit.h"
OledWingAdafruit display;

void setup()
{
   b40c4:	b510      	push	{r4, lr}
  Serial.begin(9600);
   b40c6:	f001 ff43 	bl	b5f50 <_Z16_fetch_usbserialv>
  Serial1.begin(9600);
  display.setup();
   b40ca:	4c0d      	ldr	r4, [pc, #52]	; (b4100 <setup+0x3c>)
  Serial.begin(9600);
   b40cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d0:	f001 ff32 	bl	b5f38 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   b40d4:	f002 f90e 	bl	b62f4 <_Z22__fetch_global_Serial1v>
   b40d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40dc:	f001 fed4 	bl	b5e88 <_ZN11USARTSerial5beginEm>
  display.setup();
   b40e0:	4620      	mov	r0, r4
   b40e2:	f001 f8d5 	bl	b5290 <_ZN16OledWingAdafruit5setupEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b40e6:	2300      	movs	r3, #0
  display.setCursor(0, 0);
  display.setTextSize(1);
   b40e8:	2101      	movs	r1, #1
   b40ea:	4620      	mov	r0, r4
   b40ec:	6123      	str	r3, [r4, #16]
   b40ee:	f000 fc3e 	bl	b496e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.clearDisplay();
   b40f2:	4620      	mov	r0, r4
   b40f4:	f000 fdf4 	bl	b4ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b40fc:	6163      	str	r3, [r4, #20]
  display.setTextColor(WHITE);
}
   b40fe:	bd10      	pop	{r4, pc}
   b4100:	2003e648 	.word	0x2003e648

000b4104 <loop>:

void loop()
{
   b4104:	b570      	push	{r4, r5, r6, lr}
  if (Serial.available() > 0)
   b4106:	f001 ff23 	bl	b5f50 <_Z16_fetch_usbserialv>
   b410a:	6803      	ldr	r3, [r0, #0]
   b410c:	691b      	ldr	r3, [r3, #16]
   b410e:	4798      	blx	r3
   b4110:	2800      	cmp	r0, #0
   b4112:	dd31      	ble.n	b4178 <loop+0x74>
  {
    int value = Serial.read();
   b4114:	f001 ff1c 	bl	b5f50 <_Z16_fetch_usbserialv>
   b4118:	6803      	ldr	r3, [r0, #0]
   b411a:	695b      	ldr	r3, [r3, #20]
   b411c:	4798      	blx	r3
   b411e:	4604      	mov	r4, r0
    Serial.println(value);
   b4120:	f001 ff16 	bl	b5f50 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4124:	2c00      	cmp	r4, #0
   b4126:	4605      	mov	r5, r0
   b4128:	da13      	bge.n	b4152 <loop+0x4e>
            t = print('-');
   b412a:	212d      	movs	r1, #45	; 0x2d
   b412c:	f001 fd24 	bl	b5b78 <_ZN5Print5printEc>
            val = -n;
   b4130:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4132:	220a      	movs	r2, #10
   b4134:	4628      	mov	r0, r5
   b4136:	f001 fd2e 	bl	b5b96 <_ZN5Print11printNumberEmh>
        n += println();
   b413a:	4628      	mov	r0, r5
   b413c:	f001 fd1f 	bl	b5b7e <_ZN5Print7printlnEv>
    if (value == 49) {
   b4140:	2c31      	cmp	r4, #49	; 0x31
   b4142:	d108      	bne.n	b4156 <loop+0x52>
      Serial1.write(1);
   b4144:	f002 f8d6 	bl	b62f4 <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   b4148:	2101      	movs	r1, #1
      Serial1.write(0);
    } else if (value == 63) {
      Serial1.write("?");
    }
  }
}
   b414a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b414e:	f001 be9e 	b.w	b5e8e <_ZN11USARTSerial5writeEt>
            val = n;
   b4152:	4621      	mov	r1, r4
   b4154:	e7ed      	b.n	b4132 <loop+0x2e>
    } else if (value == 48) {
   b4156:	2c30      	cmp	r4, #48	; 0x30
   b4158:	d103      	bne.n	b4162 <loop+0x5e>
      Serial1.write(0);
   b415a:	f002 f8cb 	bl	b62f4 <_Z22__fetch_global_Serial1v>
   b415e:	2100      	movs	r1, #0
   b4160:	e7f3      	b.n	b414a <loop+0x46>
    } else if (value == 63) {
   b4162:	2c3f      	cmp	r4, #63	; 0x3f
   b4164:	d108      	bne.n	b4178 <loop+0x74>
      Serial1.write("?");
   b4166:	f002 f8c5 	bl	b62f4 <_Z22__fetch_global_Serial1v>
      return write((const uint8_t *)str, strlen(str));
   b416a:	6803      	ldr	r3, [r0, #0]
   b416c:	4903      	ldr	r1, [pc, #12]	; (b417c <loop+0x78>)
   b416e:	68db      	ldr	r3, [r3, #12]
}
   b4170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4174:	2201      	movs	r2, #1
   b4176:	4718      	bx	r3
   b4178:	bd70      	pop	{r4, r5, r6, pc}
   b417a:	bf00      	nop
   b417c:	000b64d9 	.word	0x000b64d9

000b4180 <_GLOBAL__sub_I_SystemMode>:
   b4180:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4182:	4b09      	ldr	r3, [pc, #36]	; (b41a8 <_GLOBAL__sub_I_SystemMode+0x28>)
    SleepResult() {}
   b4184:	4a09      	ldr	r2, [pc, #36]	; (b41ac <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4186:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4188:	2400      	movs	r4, #0
   b418a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b418e:	2003      	movs	r0, #3
   b4190:	f001 fa38 	bl	b5604 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4194:	4621      	mov	r1, r4
   b4196:	2001      	movs	r0, #1
   b4198:	f001 fa44 	bl	b5624 <system_thread_set_state>
}
   b419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b41a0:	4803      	ldr	r0, [pc, #12]	; (b41b0 <_GLOBAL__sub_I_SystemMode+0x30>)
   b41a2:	2107      	movs	r1, #7
   b41a4:	f001 b846 	b.w	b5234 <_ZN16OledWingAdafruitC1Ei>
   b41a8:	2003e63c 	.word	0x2003e63c
   b41ac:	ffff0000 	.word	0xffff0000
   b41b0:	2003e648 	.word	0x2003e648

000b41b4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b41b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b41b8:	b085      	sub	sp, #20
   b41ba:	461f      	mov	r7, r3
   b41bc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b41c0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b41c4:	eba8 0902 	sub.w	r9, r8, r2
   b41c8:	eba7 0a01 	sub.w	sl, r7, r1
   b41cc:	f1b9 0f00 	cmp.w	r9, #0
   b41d0:	bfb8      	it	lt
   b41d2:	f1c9 0900 	rsblt	r9, r9, #0
   b41d6:	f1ba 0f00 	cmp.w	sl, #0
   b41da:	bfb8      	it	lt
   b41dc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b41e0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b41e2:	4683      	mov	fp, r0
   b41e4:	460c      	mov	r4, r1
   b41e6:	4615      	mov	r5, r2
    if (steep) {
   b41e8:	dd04      	ble.n	b41f4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b41ea:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b41ec:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b41ee:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b41f0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b41f2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b41f4:	42bc      	cmp	r4, r7
   b41f6:	dd05      	ble.n	b4204 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b41f8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b41fa:	4645      	mov	r5, r8
   b41fc:	4690      	mov	r8, r2
    if (x0 > x1) {
   b41fe:	4622      	mov	r2, r4
   b4200:	463c      	mov	r4, r7
   b4202:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4204:	1b3e      	subs	r6, r7, r4
   b4206:	b2b2      	uxth	r2, r6
   b4208:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b420a:	eba8 0205 	sub.w	r2, r8, r5
   b420e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4212:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4216:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b421a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b421e:	4545      	cmp	r5, r8
   b4220:	bfb4      	ite	lt
   b4222:	2201      	movlt	r2, #1
   b4224:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4228:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b422a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b422c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b422e:	42bc      	cmp	r4, r7
   b4230:	dc1c      	bgt.n	b426c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4232:	f8db 2000 	ldr.w	r2, [fp]
   b4236:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4238:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b423a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b423e:	bfc7      	ittee	gt
   b4240:	4629      	movgt	r1, r5
   b4242:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4244:	462a      	movle	r2, r5
   b4246:	4621      	movle	r1, r4
   b4248:	4658      	mov	r0, fp
   b424a:	47c0      	blx	r8
        }
        err -= dy;
   b424c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b424e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4250:	1ab6      	subs	r6, r6, r2
   b4252:	b2b1      	uxth	r1, r6
   b4254:	b236      	sxth	r6, r6
        if (err < 0) {
   b4256:	2e00      	cmp	r6, #0
   b4258:	da05      	bge.n	b4266 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b425a:	9a02      	ldr	r2, [sp, #8]
   b425c:	4415      	add	r5, r2
            err += dx;
   b425e:	9a00      	ldr	r2, [sp, #0]
   b4260:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4262:	b22d      	sxth	r5, r5
            err += dx;
   b4264:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4266:	3401      	adds	r4, #1
   b4268:	b224      	sxth	r4, r4
   b426a:	e7e0      	b.n	b422e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b426c:	b005      	add	sp, #20
   b426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4272 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4272:	4770      	bx	lr

000b4274 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4274:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4276:	6804      	ldr	r4, [r0, #0]
   b4278:	6924      	ldr	r4, [r4, #16]
   b427a:	46a4      	mov	ip, r4
}
   b427c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4280:	4760      	bx	ip

000b4282 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4282:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4284:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4286:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b428a:	9502      	str	r5, [sp, #8]
   b428c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b428e:	46a4      	mov	ip, r4
}
   b4290:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4292:	4760      	bx	ip

000b4294 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4294:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4296:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4298:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b429c:	9502      	str	r5, [sp, #8]
   b429e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b42a0:	46a4      	mov	ip, r4
}
   b42a2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b42a4:	4760      	bx	ip

000b42a6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b42a6:	b470      	push	{r4, r5, r6}
   b42a8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b42ac:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b42b0:	6804      	ldr	r4, [r0, #0]
   b42b2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b42b6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b42b8:	46a4      	mov	ip, r4
}
   b42ba:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b42bc:	4760      	bx	ip

000b42be <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b42be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42c2:	461c      	mov	r4, r3
    startWrite();
   b42c4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b42c6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b42ca:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b42cc:	4605      	mov	r5, r0
   b42ce:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b42d0:	3c01      	subs	r4, #1
   b42d2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b42d4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b42d6:	b224      	sxth	r4, r4
    startWrite();
   b42d8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b42da:	682b      	ldr	r3, [r5, #0]
   b42dc:	f8cd 8004 	str.w	r8, [sp, #4]
   b42e0:	9400      	str	r4, [sp, #0]
   b42e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b42e4:	4628      	mov	r0, r5
   b42e6:	463b      	mov	r3, r7
   b42e8:	4632      	mov	r2, r6
   b42ea:	4639      	mov	r1, r7
   b42ec:	47a0      	blx	r4
    endWrite();
   b42ee:	682b      	ldr	r3, [r5, #0]
   b42f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42f2:	4628      	mov	r0, r5
}
   b42f4:	b002      	add	sp, #8
   b42f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b42fa:	4718      	bx	r3

000b42fc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b42fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4300:	461d      	mov	r5, r3
    startWrite();
   b4302:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4304:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4308:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b430a:	4604      	mov	r4, r0
   b430c:	4617      	mov	r7, r2
   b430e:	460e      	mov	r6, r1
    startWrite();
   b4310:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4312:	e9cd 7800 	strd	r7, r8, [sp]
   b4316:	6822      	ldr	r2, [r4, #0]
   b4318:	1e6b      	subs	r3, r5, #1
   b431a:	4433      	add	r3, r6
   b431c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b431e:	4620      	mov	r0, r4
   b4320:	b21b      	sxth	r3, r3
   b4322:	463a      	mov	r2, r7
   b4324:	4631      	mov	r1, r6
   b4326:	47a8      	blx	r5
    endWrite();
   b4328:	6823      	ldr	r3, [r4, #0]
   b432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b432c:	4620      	mov	r0, r4
}
   b432e:	b002      	add	sp, #8
   b4330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4334:	4718      	bx	r3

000b4336 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4336:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b433a:	461e      	mov	r6, r3
    startWrite();
   b433c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b433e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4342:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4344:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4348:	460c      	mov	r4, r1
   b434a:	4605      	mov	r5, r0
   b434c:	4617      	mov	r7, r2
    startWrite();
   b434e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4350:	4426      	add	r6, r4
   b4352:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4354:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4356:	da0b      	bge.n	b4370 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4358:	f8cd 8000 	str.w	r8, [sp]
   b435c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4360:	4621      	mov	r1, r4
   b4362:	464b      	mov	r3, r9
   b4364:	463a      	mov	r2, r7
   b4366:	4628      	mov	r0, r5
   b4368:	3401      	adds	r4, #1
   b436a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b436c:	b224      	sxth	r4, r4
   b436e:	e7f0      	b.n	b4352 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4372:	4628      	mov	r0, r5
}
   b4374:	b002      	add	sp, #8
   b4376:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b437a:	4718      	bx	r3

000b437c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b437c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b437e:	6802      	ldr	r2, [r0, #0]
   b4380:	9101      	str	r1, [sp, #4]
   b4382:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4386:	9100      	str	r1, [sp, #0]
   b4388:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b438a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b438e:	2200      	movs	r2, #0
   b4390:	4611      	mov	r1, r2
   b4392:	47a0      	blx	r4
}
   b4394:	b002      	add	sp, #8
   b4396:	bd10      	pop	{r4, pc}

000b4398 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b439c:	4299      	cmp	r1, r3
        uint16_t color) {
   b439e:	4616      	mov	r6, r2
   b43a0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b43a4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43a8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b43aa:	4680      	mov	r8, r0
   b43ac:	460d      	mov	r5, r1
   b43ae:	461c      	mov	r4, r3
    if(x0 == x1){
   b43b0:	d113      	bne.n	b43da <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b43b2:	42be      	cmp	r6, r7
   b43b4:	bfc8      	it	gt
   b43b6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b43bc:	bfc4      	itt	gt
   b43be:	463e      	movgt	r6, r7
   b43c0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b43c2:	1c7b      	adds	r3, r7, #1
   b43c4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b43c6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43c8:	b21b      	sxth	r3, r3
   b43ca:	4632      	mov	r2, r6
   b43cc:	4629      	mov	r1, r5
   b43ce:	4640      	mov	r0, r8
   b43d0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b43d2:	b003      	add	sp, #12
   b43d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43d8:	4760      	bx	ip
    } else if(y0 == y1){
   b43da:	42be      	cmp	r6, r7
   b43dc:	d10a      	bne.n	b43f4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b43de:	4299      	cmp	r1, r3
   b43e0:	bfc2      	ittt	gt
   b43e2:	460b      	movgt	r3, r1
   b43e4:	4625      	movgt	r5, r4
   b43e6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43e8:	1c63      	adds	r3, r4, #1
   b43ea:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b43ee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b43f0:	1b5b      	subs	r3, r3, r5
   b43f2:	e7e9      	b.n	b43c8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b43f4:	6953      	ldr	r3, [r2, #20]
   b43f6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b43f8:	e9cd 7900 	strd	r7, r9, [sp]
   b43fc:	f8d8 3000 	ldr.w	r3, [r8]
   b4400:	4640      	mov	r0, r8
   b4402:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4404:	4632      	mov	r2, r6
   b4406:	4623      	mov	r3, r4
   b4408:	4629      	mov	r1, r5
   b440a:	47b8      	blx	r7
        endWrite();
   b440c:	f8d8 3000 	ldr.w	r3, [r8]
   b4410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4412:	4640      	mov	r0, r8
}
   b4414:	b003      	add	sp, #12
   b4416:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b441a:	4718      	bx	r3

000b441c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b441c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4420:	461d      	mov	r5, r3
    startWrite();
   b4422:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4424:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4428:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b442a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b442e:	4604      	mov	r4, r0
   b4430:	460f      	mov	r7, r1
   b4432:	4616      	mov	r6, r2
    startWrite();
   b4434:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4436:	6823      	ldr	r3, [r4, #0]
   b4438:	f8cd 8000 	str.w	r8, [sp]
   b443c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4440:	4632      	mov	r2, r6
   b4442:	462b      	mov	r3, r5
   b4444:	4639      	mov	r1, r7
   b4446:	4620      	mov	r0, r4
   b4448:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b444a:	6823      	ldr	r3, [r4, #0]
   b444c:	f8cd 8000 	str.w	r8, [sp]
   b4450:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4454:	4432      	add	r2, r6
   b4456:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b445a:	4639      	mov	r1, r7
   b445c:	462b      	mov	r3, r5
   b445e:	4620      	mov	r0, r4
   b4460:	b212      	sxth	r2, r2
   b4462:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4464:	6823      	ldr	r3, [r4, #0]
   b4466:	f8cd 8000 	str.w	r8, [sp]
   b446a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b446e:	4632      	mov	r2, r6
   b4470:	464b      	mov	r3, r9
   b4472:	4639      	mov	r1, r7
   b4474:	4620      	mov	r0, r4
   b4476:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4478:	1e6b      	subs	r3, r5, #1
   b447a:	19d9      	adds	r1, r3, r7
   b447c:	6823      	ldr	r3, [r4, #0]
   b447e:	f8cd 8000 	str.w	r8, [sp]
   b4482:	6a1d      	ldr	r5, [r3, #32]
   b4484:	4620      	mov	r0, r4
   b4486:	464b      	mov	r3, r9
   b4488:	4632      	mov	r2, r6
   b448a:	b209      	sxth	r1, r1
   b448c:	47a8      	blx	r5
    endWrite();
   b448e:	6823      	ldr	r3, [r4, #0]
   b4490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4492:	4620      	mov	r0, r4
}
   b4494:	b002      	add	sp, #8
   b4496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b449a:	4718      	bx	r3

000b449c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b449c:	4770      	bx	lr

000b449e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b449e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b44a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b44a6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b44a8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b44aa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b44ae:	bf59      	ittee	pl
   b44b0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b44b2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b44b4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b44b6:	81c3      	strhmi	r3, [r0, #14]
}
   b44b8:	4770      	bx	lr
	...

000b44bc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b44bc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b44be:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b44c0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b44c2:	4a07      	ldr	r2, [pc, #28]	; (b44e0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b44c4:	4d07      	ldr	r5, [pc, #28]	; (b44e4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b44c6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b44c8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b44ca:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b44cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b44d0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b44d4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b44d6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b44d8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b44da:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b44dc:	6204      	str	r4, [r0, #32]
}
   b44de:	bd30      	pop	{r4, r5, pc}
   b44e0:	01000101 	.word	0x01000101
   b44e4:	000b69e4 	.word	0x000b69e4

000b44e8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44ec:	b089      	sub	sp, #36	; 0x24
   b44ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b44f2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44f4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b44f8:	9304      	str	r3, [sp, #16]
   b44fa:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b44fe:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4500:	9305      	str	r3, [sp, #20]
   b4502:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4506:	4604      	mov	r4, r0
    startWrite();
   b4508:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b450a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b450e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4512:	bf48      	it	mi
   b4514:	f108 020e 	addmi.w	r2, r8, #14
   b4518:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b451c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b451e:	4635      	mov	r5, r6
   b4520:	9b03      	ldr	r3, [sp, #12]
   b4522:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4524:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4528:	189a      	adds	r2, r3, r2
   b452a:	9b05      	ldr	r3, [sp, #20]
   b452c:	428b      	cmp	r3, r1
   b452e:	b212      	sxth	r2, r2
   b4530:	dd27      	ble.n	b4582 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4532:	9b04      	ldr	r3, [sp, #16]
   b4534:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4536:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b453a:	9306      	str	r3, [sp, #24]
   b453c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4540:	4580      	cmp	r8, r0
   b4542:	fa1f f189 	uxth.w	r1, r9
   b4546:	dd17      	ble.n	b4578 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4548:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b454a:	bf05      	ittet	eq
   b454c:	9b06      	ldreq	r3, [sp, #24]
   b454e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4550:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4552:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4554:	bf18      	it	ne
   b4556:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4558:	062b      	lsls	r3, r5, #24
   b455a:	d50a      	bpl.n	b4572 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b455c:	9b02      	ldr	r3, [sp, #8]
   b455e:	6820      	ldr	r0, [r4, #0]
   b4560:	9207      	str	r2, [sp, #28]
   b4562:	4419      	add	r1, r3
   b4564:	6983      	ldr	r3, [r0, #24]
   b4566:	b209      	sxth	r1, r1
   b4568:	461f      	mov	r7, r3
   b456a:	4620      	mov	r0, r4
   b456c:	4653      	mov	r3, sl
   b456e:	47b8      	blx	r7
   b4570:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b4572:	f109 0901 	add.w	r9, r9, #1
   b4576:	e7e1      	b.n	b453c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4578:	9b01      	ldr	r3, [sp, #4]
   b457a:	3301      	adds	r3, #1
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	445e      	add	r6, fp
   b4580:	e7ce      	b.n	b4520 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b4582:	6823      	ldr	r3, [r4, #0]
   b4584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4586:	4620      	mov	r0, r4
}
   b4588:	b009      	add	sp, #36	; 0x24
   b458a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b458e:	4718      	bx	r3

000b4590 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4594:	ed2d 8b02 	vpush	{d8}
   b4598:	b091      	sub	sp, #68	; 0x44
   b459a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b459c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b459e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b45a2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b45a6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b45aa:	9103      	str	r1, [sp, #12]
   b45ac:	461f      	mov	r7, r3
   b45ae:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b45b2:	9304      	str	r3, [sp, #16]
   b45b4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b45b6:	2a00      	cmp	r2, #0
   b45b8:	f040 80c5 	bne.w	b4746 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b45bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b45c0:	428b      	cmp	r3, r1
   b45c2:	f340 814c 	ble.w	b485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b45c6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b45ca:	42b3      	cmp	r3, r6
   b45cc:	f340 8147 	ble.w	b485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45d0:	2306      	movs	r3, #6
   b45d2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b45d6:	2b00      	cmp	r3, #0
   b45d8:	f340 8141 	ble.w	b485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b45dc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45e0:	2b00      	cmp	r3, #0
   b45e2:	f340 813c 	ble.w	b485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b45e6:	7f03      	ldrb	r3, [r0, #28]
   b45e8:	b91b      	cbnz	r3, b45f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b45ea:	2faf      	cmp	r7, #175	; 0xaf
   b45ec:	bf84      	itt	hi
   b45ee:	3701      	addhi	r7, #1
   b45f0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b45f2:	f8db 3000 	ldr.w	r3, [fp]
   b45f6:	4658      	mov	r0, fp
   b45f8:	695b      	ldr	r3, [r3, #20]
   b45fa:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b45fc:	2205      	movs	r2, #5
   b45fe:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4600:	2200      	movs	r2, #0
   b4602:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4604:	4a98      	ldr	r2, [pc, #608]	; (b4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4606:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b460a:	18d3      	adds	r3, r2, r3
   b460c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b460e:	b2b3      	uxth	r3, r6
   b4610:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4612:	9a05      	ldr	r2, [sp, #20]
   b4614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4616:	5c9b      	ldrb	r3, [r3, r2]
   b4618:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b461a:	b2ab      	uxth	r3, r5
   b461c:	930b      	str	r3, [sp, #44]	; 0x2c
   b461e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4622:	9308      	str	r3, [sp, #32]
   b4624:	9b03      	ldr	r3, [sp, #12]
   b4626:	fb02 f905 	mul.w	r9, r2, r5
   b462a:	fa19 f983 	uxtah	r9, r9, r3
   b462e:	fa0f f389 	sxth.w	r3, r9
   b4632:	ee08 3a10 	vmov	s16, r3
   b4636:	2308      	movs	r3, #8
   b4638:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b463a:	9b03      	ldr	r3, [sp, #12]
   b463c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4640:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4644:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4648:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b464a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b464e:	07d2      	lsls	r2, r2, #31
   b4650:	d552      	bpl.n	b46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4652:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4654:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4658:	d13e      	bne.n	b46d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b465a:	2c01      	cmp	r4, #1
   b465c:	d13c      	bne.n	b46d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b465e:	699b      	ldr	r3, [r3, #24]
   b4660:	9906      	ldr	r1, [sp, #24]
   b4662:	461f      	mov	r7, r3
   b4664:	9b04      	ldr	r3, [sp, #16]
   b4666:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4668:	b212      	sxth	r2, r2
   b466a:	4651      	mov	r1, sl
   b466c:	4658      	mov	r0, fp
   b466e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4670:	f109 0301 	add.w	r3, r9, #1
   b4674:	fa4f f983 	sxtb.w	r9, r3
   b4678:	9b07      	ldr	r3, [sp, #28]
   b467a:	085b      	lsrs	r3, r3, #1
   b467c:	9307      	str	r3, [sp, #28]
   b467e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4680:	3b01      	subs	r3, #1
   b4682:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4686:	930a      	str	r3, [sp, #40]	; 0x28
   b4688:	d1de      	bne.n	b4648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b468a:	9f05      	ldr	r7, [sp, #20]
   b468c:	3701      	adds	r7, #1
   b468e:	b27b      	sxtb	r3, r7
   b4690:	9305      	str	r3, [sp, #20]
   b4692:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4694:	3b01      	subs	r3, #1
   b4696:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b469a:	9309      	str	r3, [sp, #36]	; 0x24
   b469c:	d1b9      	bne.n	b4612 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b469e:	9b04      	ldr	r3, [sp, #16]
   b46a0:	4543      	cmp	r3, r8
   b46a2:	d00f      	beq.n	b46c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b46a4:	2d01      	cmp	r5, #1
   b46a6:	f8db 3000 	ldr.w	r3, [fp]
   b46aa:	d13b      	bne.n	b4724 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b46ac:	2c01      	cmp	r4, #1
   b46ae:	d139      	bne.n	b4724 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b46b0:	9908      	ldr	r1, [sp, #32]
   b46b2:	f8cd 8000 	str.w	r8, [sp]
   b46b6:	3105      	adds	r1, #5
   b46b8:	6a1c      	ldr	r4, [r3, #32]
   b46ba:	4632      	mov	r2, r6
   b46bc:	2308      	movs	r3, #8
   b46be:	b209      	sxth	r1, r1
   b46c0:	4658      	mov	r0, fp
   b46c2:	47a0      	blx	r4
        endWrite();
   b46c4:	f8db 3000 	ldr.w	r3, [fp]
   b46c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ca:	4658      	mov	r0, fp
}
   b46cc:	b011      	add	sp, #68	; 0x44
   b46ce:	ecbd 8b02 	vpop	{d8}
   b46d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b46d6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b46d8:	9906      	ldr	r1, [sp, #24]
   b46da:	fb14 f202 	smulbb	r2, r4, r2
   b46de:	440a      	add	r2, r1
   b46e0:	9904      	ldr	r1, [sp, #16]
   b46e2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b46e4:	9400      	str	r4, [sp, #0]
   b46e6:	69db      	ldr	r3, [r3, #28]
   b46e8:	ee18 1a10 	vmov	r1, s16
   b46ec:	461f      	mov	r7, r3
   b46ee:	b212      	sxth	r2, r2
   b46f0:	462b      	mov	r3, r5
   b46f2:	4658      	mov	r0, fp
   b46f4:	47b8      	blx	r7
   b46f6:	e7bb      	b.n	b4670 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b46f8:	9a04      	ldr	r2, [sp, #16]
   b46fa:	4542      	cmp	r2, r8
   b46fc:	d0b8      	beq.n	b4670 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b46fe:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4700:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4704:	d107      	bne.n	b4716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4706:	2c01      	cmp	r4, #1
   b4708:	d105      	bne.n	b4716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b470a:	699b      	ldr	r3, [r3, #24]
   b470c:	9906      	ldr	r1, [sp, #24]
   b470e:	461f      	mov	r7, r3
   b4710:	440a      	add	r2, r1
   b4712:	4643      	mov	r3, r8
   b4714:	e7a8      	b.n	b4668 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4716:	9906      	ldr	r1, [sp, #24]
   b4718:	f8cd 8004 	str.w	r8, [sp, #4]
   b471c:	fb14 f202 	smulbb	r2, r4, r2
   b4720:	440a      	add	r2, r1
   b4722:	e7df      	b.n	b46e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4726:	f8cd 8004 	str.w	r8, [sp, #4]
   b472a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b472e:	9a08      	ldr	r2, [sp, #32]
   b4730:	00e4      	lsls	r4, r4, #3
   b4732:	440a      	add	r2, r1
   b4734:	4611      	mov	r1, r2
   b4736:	9400      	str	r4, [sp, #0]
   b4738:	69dc      	ldr	r4, [r3, #28]
   b473a:	4632      	mov	r2, r6
   b473c:	462b      	mov	r3, r5
   b473e:	b209      	sxth	r1, r1
   b4740:	4658      	mov	r0, fp
   b4742:	47a0      	blx	r4
        endWrite();
   b4744:	e7be      	b.n	b46c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4746:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4748:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b474a:	6812      	ldr	r2, [r2, #0]
   b474c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b474e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4750:	b2ff      	uxtb	r7, r7
   b4752:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4756:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b475a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b475c:	789a      	ldrb	r2, [r3, #2]
   b475e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4760:	78da      	ldrb	r2, [r3, #3]
   b4762:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4764:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4766:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b476a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b476e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4770:	d801      	bhi.n	b4776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4772:	2c01      	cmp	r4, #1
   b4774:	d957      	bls.n	b4826 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4776:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b477a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b477c:	fa0f f38a 	sxth.w	r3, sl
   b4780:	9307      	str	r3, [sp, #28]
        startWrite();
   b4782:	f8db 3000 	ldr.w	r3, [fp]
   b4786:	4658      	mov	r0, fp
   b4788:	695b      	ldr	r3, [r3, #20]
   b478a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b478c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b478e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4792:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4794:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4798:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b479a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b479c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b479e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b47a0:	429f      	cmp	r7, r3
   b47a2:	d28f      	bcs.n	b46c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47a4:	9b07      	ldr	r3, [sp, #28]
   b47a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b47a8:	443b      	add	r3, r7
   b47aa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b47ae:	2200      	movs	r2, #0
   b47b0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47b4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47b6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47ba:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47be:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47c2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b47c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b47c6:	9905      	ldr	r1, [sp, #20]
   b47c8:	4291      	cmp	r1, r2
   b47ca:	d241      	bcs.n	b4850 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b47cc:	1c5a      	adds	r2, r3, #1
   b47ce:	b2d2      	uxtb	r2, r2
   b47d0:	075b      	lsls	r3, r3, #29
   b47d2:	920d      	str	r2, [sp, #52]	; 0x34
   b47d4:	d107      	bne.n	b47e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b47d6:	9b06      	ldr	r3, [sp, #24]
   b47d8:	9906      	ldr	r1, [sp, #24]
   b47da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b47dc:	3301      	adds	r3, #1
   b47de:	b29b      	uxth	r3, r3
   b47e0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b47e4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b47e6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b47ea:	d012      	beq.n	b4812 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b47ec:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47ee:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b47f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b47f6:	d11a      	bne.n	b482e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b47f8:	2c01      	cmp	r4, #1
   b47fa:	d118      	bne.n	b482e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b47fe:	699b      	ldr	r3, [r3, #24]
   b4800:	4411      	add	r1, r2
   b4802:	9a05      	ldr	r2, [sp, #20]
   b4804:	4411      	add	r1, r2
   b4806:	461e      	mov	r6, r3
   b4808:	4652      	mov	r2, sl
   b480a:	9b04      	ldr	r3, [sp, #16]
   b480c:	b209      	sxth	r1, r1
   b480e:	4658      	mov	r0, fp
   b4810:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4812:	9e05      	ldr	r6, [sp, #20]
   b4814:	3601      	adds	r6, #1
   b4816:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4818:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b481c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b481e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4824:	e7ce      	b.n	b47c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4826:	2300      	movs	r3, #0
   b4828:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b482c:	e7a9      	b.n	b4782 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b482e:	9805      	ldr	r0, [sp, #20]
   b4830:	9a08      	ldr	r2, [sp, #32]
   b4832:	4402      	add	r2, r0
   b4834:	fb02 1105 	mla	r1, r2, r5, r1
   b4838:	9a04      	ldr	r2, [sp, #16]
   b483a:	e9cd 4200 	strd	r4, r2, [sp]
   b483e:	69db      	ldr	r3, [r3, #28]
   b4840:	ee18 2a10 	vmov	r2, s16
   b4844:	461e      	mov	r6, r3
   b4846:	b209      	sxth	r1, r1
   b4848:	462b      	mov	r3, r5
   b484a:	4658      	mov	r0, fp
   b484c:	47b0      	blx	r6
   b484e:	e7e0      	b.n	b4812 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4850:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4852:	3701      	adds	r7, #1
   b4854:	4498      	add	r8, r3
   b4856:	fa5f f888 	uxtb.w	r8, r8
   b485a:	b2ff      	uxtb	r7, r7
   b485c:	e79f      	b.n	b479e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b485e:	b011      	add	sp, #68	; 0x44
   b4860:	ecbd 8b02 	vpop	{d8}
   b4864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4868:	000b64db 	.word	0x000b64db

000b486c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b486e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4870:	b085      	sub	sp, #20
   b4872:	4604      	mov	r4, r0
   b4874:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4876:	2a00      	cmp	r2, #0
   b4878:	d134      	bne.n	b48e4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b487a:	290a      	cmp	r1, #10
   b487c:	d108      	bne.n	b4890 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b487e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4880:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4882:	7e42      	ldrb	r2, [r0, #25]
   b4884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4888:	8263      	strh	r3, [r4, #18]
}
   b488a:	2001      	movs	r0, #1
   b488c:	b005      	add	sp, #20
   b488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4890:	290d      	cmp	r1, #13
   b4892:	d0fa      	beq.n	b488a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4894:	7ee1      	ldrb	r1, [r4, #27]
   b4896:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4898:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b489a:	b171      	cbz	r1, b48ba <_ZN12Adafruit_GFX5writeEh+0x4e>
   b489c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b48a0:	2106      	movs	r1, #6
   b48a2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b48a6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b48aa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b48ac:	bfc1      	itttt	gt
   b48ae:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b48b2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b48b4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b48b8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b48ba:	8ae2      	ldrh	r2, [r4, #22]
   b48bc:	9201      	str	r2, [sp, #4]
   b48be:	8aa2      	ldrh	r2, [r4, #20]
   b48c0:	9200      	str	r2, [sp, #0]
   b48c2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b48c6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b48ca:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b48ce:	4620      	mov	r0, r4
   b48d0:	f7ff fe5e 	bl	b4590 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b48d4:	7e23      	ldrb	r3, [r4, #24]
   b48d6:	8a22      	ldrh	r2, [r4, #16]
   b48d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b48dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b48e0:	8223      	strh	r3, [r4, #16]
   b48e2:	e7d2      	b.n	b488a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b48e4:	290a      	cmp	r1, #10
   b48e6:	d107      	bne.n	b48f8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b48e8:	2300      	movs	r3, #0
   b48ea:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b48ec:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b48ee:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b48f0:	8a43      	ldrh	r3, [r0, #18]
   b48f2:	fb01 3302 	mla	r3, r1, r2, r3
   b48f6:	e7c7      	b.n	b4888 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b48f8:	290d      	cmp	r1, #13
   b48fa:	d0c6      	beq.n	b488a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b48fc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b48fe:	42a9      	cmp	r1, r5
   b4900:	d3c3      	bcc.n	b488a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4902:	7a51      	ldrb	r1, [r2, #9]
   b4904:	4299      	cmp	r1, r3
   b4906:	d3c0      	bcc.n	b488a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4908:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b490a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b490c:	b2ed      	uxtb	r5, r5
   b490e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4912:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4914:	b328      	cbz	r0, b4962 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4916:	78e9      	ldrb	r1, [r5, #3]
   b4918:	b319      	cbz	r1, b4962 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b491a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b491c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b491e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4920:	b191      	cbz	r1, b4948 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4922:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4926:	4408      	add	r0, r1
   b4928:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b492c:	fb06 1100 	mla	r1, r6, r0, r1
   b4930:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4934:	4281      	cmp	r1, r0
   b4936:	dd07      	ble.n	b4948 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4938:	2000      	movs	r0, #0
   b493a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b493c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4940:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4942:	fb02 1207 	mla	r2, r2, r7, r1
   b4946:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4948:	8ae2      	ldrh	r2, [r4, #22]
   b494a:	9201      	str	r2, [sp, #4]
   b494c:	8aa2      	ldrh	r2, [r4, #20]
   b494e:	9200      	str	r2, [sp, #0]
   b4950:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4954:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4958:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b495c:	4620      	mov	r0, r4
   b495e:	f7ff fe17 	bl	b4590 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4962:	7929      	ldrb	r1, [r5, #4]
   b4964:	7e22      	ldrb	r2, [r4, #24]
   b4966:	8a23      	ldrh	r3, [r4, #16]
   b4968:	fb01 3302 	mla	r3, r1, r2, r3
   b496c:	e7b8      	b.n	b48e0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b496e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b496e:	2901      	cmp	r1, #1
   b4970:	bf38      	it	cc
   b4972:	2101      	movcc	r1, #1
   b4974:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4976:	7641      	strb	r1, [r0, #25]
}
   b4978:	4770      	bx	lr

000b497a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b497a:	4770      	bx	lr

000b497c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b497c:	b510      	push	{r4, lr}
  }
   b497e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4980:	4604      	mov	r4, r0
  }
   b4982:	f7ff fb88 	bl	b4096 <_ZdlPvj>
   b4986:	4620      	mov	r0, r4
   b4988:	bd10      	pop	{r4, pc}

000b498a <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b498a:	b40e      	push	{r1, r2, r3}
   b498c:	b503      	push	{r0, r1, lr}
   b498e:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4990:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4992:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4996:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4998:	f001 f91b 	bl	b5bd2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b499c:	b002      	add	sp, #8
   b499e:	f85d eb04 	ldr.w	lr, [sp], #4
   b49a2:	b003      	add	sp, #12
   b49a4:	4770      	bx	lr
	...

000b49a8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b49a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b49aa:	4604      	mov	r4, r0
   b49ac:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b49ae:	7922      	ldrb	r2, [r4, #4]
   b49b0:	68a3      	ldr	r3, [r4, #8]
   b49b2:	b132      	cbz	r2, b49c2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b49b4:	b9a3      	cbnz	r3, b49e0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b49b6:	490b      	ldr	r1, [pc, #44]	; (b49e4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b49b8:	b002      	add	sp, #8
   b49ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b49be:	f001 b8d7 	b.w	b5b70 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49c2:	4a09      	ldr	r2, [pc, #36]	; (b49e8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b49c4:	7b26      	ldrb	r6, [r4, #12]
   b49c6:	4d09      	ldr	r5, [pc, #36]	; (b49ec <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b49c8:	4909      	ldr	r1, [pc, #36]	; (b49f0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b49ca:	7b64      	ldrb	r4, [r4, #13]
   b49cc:	2e01      	cmp	r6, #1
   b49ce:	bf18      	it	ne
   b49d0:	4629      	movne	r1, r5
   b49d2:	e9cd 1400 	strd	r1, r4, [sp]
   b49d6:	4907      	ldr	r1, [pc, #28]	; (b49f4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b49d8:	f7ff ffd7 	bl	b498a <_ZN5Print6printfEPKcz>
  }
   b49dc:	b002      	add	sp, #8
   b49de:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49e0:	4a05      	ldr	r2, [pc, #20]	; (b49f8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b49e2:	e7ef      	b.n	b49c4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b49e4:	000b6a45 	.word	0x000b6a45
   b49e8:	000b6a3c 	.word	0x000b6a3c
   b49ec:	000b6a41 	.word	0x000b6a41
   b49f0:	000b6a3d 	.word	0x000b6a3d
   b49f4:	000b6a5b 	.word	0x000b6a5b
   b49f8:	000b6a34 	.word	0x000b6a34

000b49fc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b49fc:	b510      	push	{r4, lr}
   b49fe:	4b04      	ldr	r3, [pc, #16]	; (b4a10 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4a00:	6003      	str	r3, [r0, #0]
   b4a02:	4604      	mov	r4, r0
  if(buffer) {
   b4a04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a06:	b108      	cbz	r0, b4a0c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4a08:	f000 fe98 	bl	b573c <free>
    buffer = NULL;
  }
}
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	bd10      	pop	{r4, pc}
   b4a10:	000b6f34 	.word	0x000b6f34

000b4a14 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a14:	b510      	push	{r4, lr}
   b4a16:	4604      	mov	r4, r0
}
   b4a18:	f7ff fff0 	bl	b49fc <_ZN16Adafruit_SSD1306D1Ev>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	2150      	movs	r1, #80	; 0x50
   b4a20:	f7ff fb39 	bl	b4096 <_ZdlPvj>
   b4a24:	4620      	mov	r0, r4
   b4a26:	bd10      	pop	{r4, pc}

000b4a28 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a28:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4a2a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a2c:	db4b      	blt.n	b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a2e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4a32:	428c      	cmp	r4, r1
   b4a34:	dd47      	ble.n	b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a36:	2a00      	cmp	r2, #0
   b4a38:	db45      	blt.n	b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a3a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4a3e:	4294      	cmp	r4, r2
   b4a40:	dd41      	ble.n	b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4a42:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4a44:	2c02      	cmp	r4, #2
   b4a46:	d01f      	beq.n	b4a88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4a48:	2c03      	cmp	r4, #3
   b4a4a:	d026      	beq.n	b4a9a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4a4c:	2c01      	cmp	r4, #1
   b4a4e:	d104      	bne.n	b4a5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4a50:	8904      	ldrh	r4, [r0, #8]
   b4a52:	43d2      	mvns	r2, r2
   b4a54:	4414      	add	r4, r2
      break;
   b4a56:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4a58:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4a5a:	2b01      	cmp	r3, #1
   b4a5c:	d023      	beq.n	b4aa6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4a5e:	2b02      	cmp	r3, #2
   b4a60:	d032      	beq.n	b4ac8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4a62:	bb83      	cbnz	r3, b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4a64:	2a00      	cmp	r2, #0
   b4a66:	4613      	mov	r3, r2
   b4a68:	8904      	ldrh	r4, [r0, #8]
   b4a6a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a6c:	bfb8      	it	lt
   b4a6e:	1dd3      	addlt	r3, r2, #7
   b4a70:	10db      	asrs	r3, r3, #3
   b4a72:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4a76:	f002 0207 	and.w	r2, r2, #7
   b4a7a:	2301      	movs	r3, #1
   b4a7c:	4093      	lsls	r3, r2
   b4a7e:	5c42      	ldrb	r2, [r0, r1]
   b4a80:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4a84:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4a86:	e01e      	b.n	b4ac6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4a88:	8904      	ldrh	r4, [r0, #8]
   b4a8a:	3c01      	subs	r4, #1
   b4a8c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4a8e:	8944      	ldrh	r4, [r0, #10]
   b4a90:	43d2      	mvns	r2, r2
   b4a92:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4a94:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4a96:	b212      	sxth	r2, r2
      break;
   b4a98:	e7df      	b.n	b4a5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4a9a:	8944      	ldrh	r4, [r0, #10]
   b4a9c:	3c01      	subs	r4, #1
   b4a9e:	1a64      	subs	r4, r4, r1
      break;
   b4aa0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4aa2:	b222      	sxth	r2, r4
      break;
   b4aa4:	e7d9      	b.n	b4a5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4aa6:	2a00      	cmp	r2, #0
   b4aa8:	8904      	ldrh	r4, [r0, #8]
   b4aaa:	4613      	mov	r3, r2
   b4aac:	bfb8      	it	lt
   b4aae:	1dd3      	addlt	r3, r2, #7
   b4ab0:	10db      	asrs	r3, r3, #3
   b4ab2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4ab6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4ab8:	f002 0007 	and.w	r0, r2, #7
   b4abc:	2201      	movs	r2, #1
   b4abe:	4082      	lsls	r2, r0
   b4ac0:	5c58      	ldrb	r0, [r3, r1]
   b4ac2:	4302      	orrs	r2, r0
   b4ac4:	545a      	strb	r2, [r3, r1]
}
   b4ac6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4ac8:	2a00      	cmp	r2, #0
   b4aca:	4613      	mov	r3, r2
   b4acc:	8904      	ldrh	r4, [r0, #8]
   b4ace:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ad0:	bfb8      	it	lt
   b4ad2:	1dd3      	addlt	r3, r2, #7
   b4ad4:	10db      	asrs	r3, r3, #3
   b4ad6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4ada:	f002 0207 	and.w	r2, r2, #7
   b4ade:	2301      	movs	r3, #1
   b4ae0:	fa03 f202 	lsl.w	r2, r3, r2
   b4ae4:	5c43      	ldrb	r3, [r0, r1]
   b4ae6:	405a      	eors	r2, r3
   b4ae8:	e7cc      	b.n	b4a84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4aec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4aec:	b570      	push	{r4, r5, r6, lr}
   b4aee:	4604      	mov	r4, r0
   b4af0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4af2:	2600      	movs	r6, #0
   b4af4:	f7ff fce2 	bl	b44bc <_ZN12Adafruit_GFXC1Ess>
   b4af8:	4b11      	ldr	r3, [pc, #68]	; (b4b40 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4afa:	6023      	str	r3, [r4, #0]
   b4afc:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4afe:	b915      	cbnz	r5, b4b06 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4b00:	f001 fbb8 	bl	b6274 <_Z19__fetch_global_Wirev>
   b4b04:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4b06:	23ff      	movs	r3, #255	; 0xff
   b4b08:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4b0c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4b10:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4b14:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4b18:	4b0a      	ldr	r3, [pc, #40]	; (b4b44 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4b1a:	63a3      	str	r3, [r4, #56]	; 0x38
   b4b1c:	2301      	movs	r3, #1
   b4b1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4b22:	9b05      	ldr	r3, [sp, #20]
   b4b24:	64a3      	str	r3, [r4, #72]	; 0x48
   b4b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4b2a:	9b06      	ldr	r3, [sp, #24]
   b4b2c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4b2e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4b32:	6426      	str	r6, [r4, #64]	; 0x40
   b4b34:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4b38:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4b3a:	4620      	mov	r0, r4
   b4b3c:	bd70      	pop	{r4, r5, r6, pc}
   b4b3e:	bf00      	nop
   b4b40:	000b6f34 	.word	0x000b6f34
   b4b44:	000b6a80 	.word	0x000b6a80

000b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b4a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4b4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b4e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4b50:	b190      	cbz	r0, b4b78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4b52:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4b56:	f000 fea7 	bl	b58a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4b5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b5c:	6803      	ldr	r3, [r0, #0]
   b4b5e:	2100      	movs	r1, #0
   b4b60:	689b      	ldr	r3, [r3, #8]
   b4b62:	4798      	blx	r3
    WIRE_WRITE(c);
   b4b64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b66:	6803      	ldr	r3, [r0, #0]
   b4b68:	4629      	mov	r1, r5
   b4b6a:	689b      	ldr	r3, [r3, #8]
   b4b6c:	4798      	blx	r3
    wire->endTransmission();
   b4b6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4b74:	f000 be9f 	b.w	b58b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4b78:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4b7c:	4601      	mov	r1, r0
   b4b7e:	b298      	uxth	r0, r3
   b4b80:	f001 fb35 	bl	b61ee <digitalWrite>
  if(spi) {
   b4b84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4b86:	b120      	cbz	r0, b4b92 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4b88:	4629      	mov	r1, r5
}
   b4b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4b8e:	f001 b903 	b.w	b5d98 <_ZN8SPIClass8transferEh>
   b4b92:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4b94:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4b96:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4b9a:	ea05 0107 	and.w	r1, r5, r7
   b4b9e:	b280      	uxth	r0, r0
   b4ba0:	f001 fb25 	bl	b61ee <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4ba4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ba8:	2101      	movs	r1, #1
   b4baa:	b280      	uxth	r0, r0
   b4bac:	f001 fb1f 	bl	b61ee <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4bb0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4bb4:	2100      	movs	r1, #0
   b4bb6:	b280      	uxth	r0, r0
   b4bb8:	f001 fb19 	bl	b61ee <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4bbc:	3e01      	subs	r6, #1
   b4bbe:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4bc2:	d1e8      	bne.n	b4b96 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bc6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4bc6:	b538      	push	{r3, r4, r5, lr}
   b4bc8:	4604      	mov	r4, r0
  TRANSACTION_START
   b4bca:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4bcc:	460d      	mov	r5, r1
  TRANSACTION_START
   b4bce:	b180      	cbz	r0, b4bf2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4bd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4bd2:	f000 fe5b 	bl	b588c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4bd6:	2d00      	cmp	r5, #0
   b4bd8:	4620      	mov	r0, r4
   b4bda:	bf14      	ite	ne
   b4bdc:	21a7      	movne	r1, #167	; 0xa7
   b4bde:	21a6      	moveq	r1, #166	; 0xa6
   b4be0:	f7ff ffb2 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4be4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4be6:	b188      	cbz	r0, b4c0c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4be8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4bee:	f000 be4d 	b.w	b588c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4bf4:	b118      	cbz	r0, b4bfe <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4bf6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4bfa:	f001 f85f 	bl	b5cbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4bfe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c02:	2100      	movs	r1, #0
   b4c04:	b280      	uxth	r0, r0
   b4c06:	f001 faf2 	bl	b61ee <digitalWrite>
   b4c0a:	e7e4      	b.n	b4bd6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4c0c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c10:	2101      	movs	r1, #1
   b4c12:	b280      	uxth	r0, r0
   b4c14:	f001 faeb 	bl	b61ee <digitalWrite>
   b4c18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c1a:	b118      	cbz	r0, b4c24 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4c20:	f001 b832 	b.w	b5c88 <_ZN8SPIClass14endTransactionEv>
}
   b4c24:	bd38      	pop	{r3, r4, r5, pc}

000b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c2a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c2e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c30:	188f      	adds	r7, r1, r2
   b4c32:	b340      	cbz	r0, b4c86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4c34:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c38:	f000 fe36 	bl	b58a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c3e:	6803      	ldr	r3, [r0, #0]
   b4c40:	2100      	movs	r1, #0
   b4c42:	689b      	ldr	r3, [r3, #8]
   b4c44:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4c46:	2601      	movs	r6, #1
    while(n--) {
   b4c48:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4c4c:	d017      	beq.n	b4c7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4c4e:	2e1f      	cmp	r6, #31
   b4c50:	d90c      	bls.n	b4c6c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4c52:	f000 fe30 	bl	b58b6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4c56:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c5c:	f000 fe24 	bl	b58a8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c62:	6803      	ldr	r3, [r0, #0]
   b4c64:	2100      	movs	r1, #0
   b4c66:	689b      	ldr	r3, [r3, #8]
   b4c68:	4798      	blx	r3
        bytesOut = 1;
   b4c6a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c6e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c72:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4c74:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c76:	689b      	ldr	r3, [r3, #8]
   b4c78:	4798      	blx	r3
      bytesOut++;
   b4c7a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4c7c:	e7e4      	b.n	b4c48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4c82:	f000 be18 	b.w	b58b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4c86:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4c8a:	4601      	mov	r1, r0
   b4c8c:	b298      	uxth	r0, r3
   b4c8e:	f001 faae 	bl	b61ee <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c92:	42bd      	cmp	r5, r7
   b4c94:	d022      	beq.n	b4cdc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4c96:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c98:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4c9c:	b118      	cbz	r0, b4ca6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4c9e:	4649      	mov	r1, r9
   b4ca0:	f001 f87a 	bl	b5d98 <_ZN8SPIClass8transferEh>
   b4ca4:	e7f5      	b.n	b4c92 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4ca6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4ca8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4cac:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4cb0:	ea09 0108 	and.w	r1, r9, r8
   b4cb4:	b280      	uxth	r0, r0
   b4cb6:	f001 fa9a 	bl	b61ee <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4cba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4cbe:	2101      	movs	r1, #1
   b4cc0:	b280      	uxth	r0, r0
   b4cc2:	f001 fa94 	bl	b61ee <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4cc6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4cca:	2100      	movs	r1, #0
   b4ccc:	b280      	uxth	r0, r0
   b4cce:	f001 fa8e 	bl	b61ee <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4cd2:	3e01      	subs	r6, #1
   b4cd4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4cd8:	d1e8      	bne.n	b4cac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4cda:	e7da      	b.n	b4c92 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4ce0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4ce4:	1dda      	adds	r2, r3, #7
   b4ce6:	bf48      	it	mi
   b4ce8:	f103 020e 	addmi.w	r2, r3, #14
   b4cec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4cf0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4cf2:	10d2      	asrs	r2, r2, #3
   b4cf4:	435a      	muls	r2, r3
   b4cf6:	2100      	movs	r1, #0
   b4cf8:	f001 bb36 	b.w	b6368 <memset>

000b4cfc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4cfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4d00:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4d04:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4d08:	4604      	mov	r4, r0
   b4d0a:	460f      	mov	r7, r1
   b4d0c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d0e:	b1c3      	cbz	r3, b4d42 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4d10:	4620      	mov	r0, r4
   b4d12:	f7ff ffe5 	bl	b4ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4d16:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4d1a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4d1e:	2820      	cmp	r0, #32
   b4d20:	dc21      	bgt.n	b4d66 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d22:	2320      	movs	r3, #32
   b4d24:	2201      	movs	r2, #1
   b4d26:	3820      	subs	r0, #32
   b4d28:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4d2c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4d30:	2373      	movs	r3, #115	; 0x73
   b4d32:	3973      	subs	r1, #115	; 0x73
   b4d34:	9300      	str	r3, [sp, #0]
   b4d36:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d3a:	4b89      	ldr	r3, [pc, #548]	; (b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4d3c:	f340 024f 	sbfx	r2, r0, #1, #16
   b4d40:	e021      	b.n	b4d86 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d42:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4d46:	1dd8      	adds	r0, r3, #7
   b4d48:	bf48      	it	mi
   b4d4a:	f103 000e 	addmi.w	r0, r3, #14
   b4d4e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4d52:	10c0      	asrs	r0, r0, #3
   b4d54:	4358      	muls	r0, r3
   b4d56:	f000 fce9 	bl	b572c <malloc>
   b4d5a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4d5c:	2800      	cmp	r0, #0
   b4d5e:	d1d7      	bne.n	b4d10 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4d60:	b004      	add	sp, #16
   b4d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4d66:	3840      	subs	r0, #64	; 0x40
   b4d68:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4d6c:	fa02 f280 	sxtah	r2, r2, r0
   b4d70:	2340      	movs	r3, #64	; 0x40
   b4d72:	2001      	movs	r0, #1
   b4d74:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4d78:	2352      	movs	r3, #82	; 0x52
   b4d7a:	3952      	subs	r1, #82	; 0x52
   b4d7c:	9300      	str	r3, [sp, #0]
   b4d7e:	4b79      	ldr	r3, [pc, #484]	; (b4f64 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4d80:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d84:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d86:	4620      	mov	r0, r4
   b4d88:	f341 014f 	sbfx	r1, r1, #1, #16
   b4d8c:	f7ff fbac 	bl	b44e8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4d92:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4d96:	2800      	cmp	r0, #0
   b4d98:	d078      	beq.n	b4e8c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4d9a:	2d00      	cmp	r5, #0
   b4d9c:	d174      	bne.n	b4e88 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4d9e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4da2:	2b20      	cmp	r3, #32
   b4da4:	bf0c      	ite	eq
   b4da6:	253c      	moveq	r5, #60	; 0x3c
   b4da8:	253d      	movne	r5, #61	; 0x3d
   b4daa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4dae:	f1b8 0f00 	cmp.w	r8, #0
   b4db2:	d001      	beq.n	b4db8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4db4:	f000 fd6e 	bl	b5894 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4db8:	b1fe      	cbz	r6, b4dfa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4dba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dbe:	2800      	cmp	r0, #0
   b4dc0:	db1b      	blt.n	b4dfa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4dc2:	2101      	movs	r1, #1
   b4dc4:	b280      	uxth	r0, r0
   b4dc6:	f001 fa01 	bl	b61cc <pinMode>
    digitalWrite(rstPin, HIGH);
   b4dca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dce:	2101      	movs	r1, #1
   b4dd0:	b280      	uxth	r0, r0
   b4dd2:	f001 fa0c 	bl	b61ee <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4dd6:	2001      	movs	r0, #1
   b4dd8:	f000 fcd0 	bl	b577c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4ddc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4de0:	2100      	movs	r1, #0
   b4de2:	b280      	uxth	r0, r0
   b4de4:	f001 fa03 	bl	b61ee <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4de8:	200a      	movs	r0, #10
   b4dea:	f000 fcc7 	bl	b577c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4dee:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4df2:	2101      	movs	r1, #1
   b4df4:	b280      	uxth	r0, r0
   b4df6:	f001 f9fa 	bl	b61ee <digitalWrite>
  TRANSACTION_START
   b4dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4dfc:	2800      	cmp	r0, #0
   b4dfe:	d074      	beq.n	b4eea <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4e00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4e02:	f000 fd43 	bl	b588c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4e06:	2204      	movs	r2, #4
   b4e08:	4957      	ldr	r1, [pc, #348]	; (b4f68 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f7ff ff0b 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4e10:	8961      	ldrh	r1, [r4, #10]
   b4e12:	3901      	subs	r1, #1
   b4e14:	b2c9      	uxtb	r1, r1
   b4e16:	4620      	mov	r0, r4
   b4e18:	f7ff fe96 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4e1c:	4953      	ldr	r1, [pc, #332]	; (b4f6c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4e1e:	2204      	movs	r2, #4
   b4e20:	4620      	mov	r0, r4
   b4e22:	f7ff ff00 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4e26:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e2a:	2b01      	cmp	r3, #1
   b4e2c:	bf0c      	ite	eq
   b4e2e:	2110      	moveq	r1, #16
   b4e30:	2114      	movne	r1, #20
   b4e32:	4620      	mov	r0, r4
   b4e34:	f7ff fe88 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4e38:	2204      	movs	r2, #4
   b4e3a:	494d      	ldr	r1, [pc, #308]	; (b4f70 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	f7ff fef2 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4e42:	68a3      	ldr	r3, [r4, #8]
   b4e44:	4a4b      	ldr	r2, [pc, #300]	; (b4f74 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4e46:	4293      	cmp	r3, r2
   b4e48:	d15c      	bne.n	b4f04 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4e4a:	494b      	ldr	r1, [pc, #300]	; (b4f78 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4e4c:	2204      	movs	r2, #4
   b4e4e:	4620      	mov	r0, r4
   b4e50:	f7ff fee9 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4e54:	21d9      	movs	r1, #217	; 0xd9
   b4e56:	4620      	mov	r0, r4
   b4e58:	f7ff fe76 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4e5c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e60:	2b01      	cmp	r3, #1
   b4e62:	bf0c      	ite	eq
   b4e64:	2122      	moveq	r1, #34	; 0x22
   b4e66:	21f1      	movne	r1, #241	; 0xf1
   b4e68:	4620      	mov	r0, r4
   b4e6a:	f7ff fe6d 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4e6e:	4620      	mov	r0, r4
   b4e70:	4942      	ldr	r1, [pc, #264]	; (b4f7c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4e72:	2206      	movs	r2, #6
   b4e74:	f7ff fed7 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4e78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e7a:	2800      	cmp	r0, #0
   b4e7c:	d063      	beq.n	b4f46 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4e7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4e80:	f000 fd04 	bl	b588c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4e84:	2001      	movs	r0, #1
   b4e86:	e76b      	b.n	b4d60 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4e88:	b26d      	sxtb	r5, r5
   b4e8a:	e78e      	b.n	b4daa <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4e8c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4e90:	2101      	movs	r1, #1
   b4e92:	b280      	uxth	r0, r0
   b4e94:	f001 f99a 	bl	b61cc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4e98:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4e9c:	2101      	movs	r1, #1
   b4e9e:	b280      	uxth	r0, r0
   b4ea0:	f001 f994 	bl	b61cc <pinMode>
    SSD1306_DESELECT
   b4ea4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ea8:	2101      	movs	r1, #1
   b4eaa:	b280      	uxth	r0, r0
   b4eac:	f001 f99f 	bl	b61ee <digitalWrite>
    if(spi) { // Hardware SPI
   b4eb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4eb2:	b13d      	cbz	r5, b4ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4eb4:	f1b8 0f00 	cmp.w	r8, #0
   b4eb8:	f43f af7e 	beq.w	b4db8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4ebc:	4628      	mov	r0, r5
   b4ebe:	f000 fecf 	bl	b5c60 <_ZN8SPIClass5beginEv>
   b4ec2:	e779      	b.n	b4db8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4ec4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4ec8:	2101      	movs	r1, #1
   b4eca:	b280      	uxth	r0, r0
   b4ecc:	f001 f97e 	bl	b61cc <pinMode>
      pinMode(clkPin , OUTPUT);
   b4ed0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ed4:	2101      	movs	r1, #1
   b4ed6:	b280      	uxth	r0, r0
   b4ed8:	f001 f978 	bl	b61cc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4edc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ee0:	4629      	mov	r1, r5
   b4ee2:	b280      	uxth	r0, r0
   b4ee4:	f001 f983 	bl	b61ee <digitalWrite>
   b4ee8:	e766      	b.n	b4db8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4eec:	b118      	cbz	r0, b4ef6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4eee:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4ef2:	f000 fee3 	bl	b5cbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4ef6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4efa:	2100      	movs	r1, #0
   b4efc:	b280      	uxth	r0, r0
   b4efe:	f001 f976 	bl	b61ee <digitalWrite>
   b4f02:	e780      	b.n	b4e06 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4f04:	4a1e      	ldr	r2, [pc, #120]	; (b4f80 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4f06:	4293      	cmp	r3, r2
   b4f08:	d10e      	bne.n	b4f28 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4f0a:	491e      	ldr	r1, [pc, #120]	; (b4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4f0c:	2203      	movs	r2, #3
   b4f0e:	4620      	mov	r0, r4
   b4f10:	f7ff fe89 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4f14:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f18:	2b01      	cmp	r3, #1
   b4f1a:	bf0c      	ite	eq
   b4f1c:	219f      	moveq	r1, #159	; 0x9f
   b4f1e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f20:	4620      	mov	r0, r4
   b4f22:	f7ff fe11 	bl	b4b48 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4f26:	e795      	b.n	b4e54 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4f28:	4a17      	ldr	r2, [pc, #92]	; (b4f88 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b4f2a:	4293      	cmp	r3, r2
   b4f2c:	d192      	bne.n	b4e54 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b4f2e:	4917      	ldr	r1, [pc, #92]	; (b4f8c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b4f30:	2203      	movs	r2, #3
   b4f32:	4620      	mov	r0, r4
   b4f34:	f7ff fe77 	bl	b4c26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f38:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f3c:	2b01      	cmp	r3, #1
   b4f3e:	bf0c      	ite	eq
   b4f40:	2110      	moveq	r1, #16
   b4f42:	21af      	movne	r1, #175	; 0xaf
   b4f44:	e7ec      	b.n	b4f20 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b4f46:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f4a:	2101      	movs	r1, #1
   b4f4c:	b280      	uxth	r0, r0
   b4f4e:	f001 f94e 	bl	b61ee <digitalWrite>
   b4f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f54:	2800      	cmp	r0, #0
   b4f56:	d095      	beq.n	b4e84 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f58:	f000 fe96 	bl	b5c88 <_ZN8SPIClass14endTransactionEv>
   b4f5c:	e792      	b.n	b4e84 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f5e:	bf00      	nop
   b4f60:	000b6d4c 	.word	0x000b6d4c
   b4f64:	000b6a8c 	.word	0x000b6a8c
   b4f68:	000b6f94 	.word	0x000b6f94
   b4f6c:	000b6f98 	.word	0x000b6f98
   b4f70:	000b6f9c 	.word	0x000b6f9c
   b4f74:	00200080 	.word	0x00200080
   b4f78:	000b6fa6 	.word	0x000b6fa6
   b4f7c:	000b6fa0 	.word	0x000b6fa0
   b4f80:	00400080 	.word	0x00400080
   b4f84:	000b6faa 	.word	0x000b6faa
   b4f88:	00100060 	.word	0x00100060
   b4f8c:	000b6fad 	.word	0x000b6fad

000b4f90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f90:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f92:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f94:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f98:	db3d      	blt.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4f9a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4f9e:	4294      	cmp	r4, r2
   b4fa0:	dd39      	ble.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4fa2:	2900      	cmp	r1, #0
      w += x;
   b4fa4:	bfbe      	ittt	lt
   b4fa6:	185b      	addlt	r3, r3, r1
   b4fa8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b4faa:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b4fac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b4fb0:	18ce      	adds	r6, r1, r3
   b4fb2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b4fb4:	bfc4      	itt	gt
   b4fb6:	1a63      	subgt	r3, r4, r1
   b4fb8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b4fba:	2b00      	cmp	r3, #0
   b4fbc:	dd2b      	ble.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b4fbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fc0:	10d6      	asrs	r6, r2, #3
   b4fc2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b4fc6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b4fc8:	f002 0007 	and.w	r0, r2, #7
   b4fcc:	2201      	movs	r2, #1
   b4fce:	4082      	lsls	r2, r0
      switch(color) {
   b4fd0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b4fd2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b4fd4:	d016      	beq.n	b5004 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b4fd6:	2d02      	cmp	r5, #2
   b4fd8:	d00b      	beq.n	b4ff2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b4fda:	b9e5      	cbnz	r5, b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b4fdc:	43d2      	mvns	r2, r2
   b4fde:	b2d2      	uxtb	r2, r2
   b4fe0:	440b      	add	r3, r1
   b4fe2:	4299      	cmp	r1, r3
   b4fe4:	d017      	beq.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fe6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fea:	4010      	ands	r0, r2
   b4fec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4ff0:	e7f7      	b.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b4ff2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b4ff4:	4299      	cmp	r1, r3
   b4ff6:	d00e      	beq.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4ff8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4ffc:	4050      	eors	r0, r2
   b4ffe:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5002:	e7f7      	b.n	b4ff4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5004:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5006:	4299      	cmp	r1, r3
   b5008:	d005      	beq.n	b5016 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b500a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b500e:	4310      	orrs	r0, r2
   b5010:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5014:	e7f7      	b.n	b5006 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5016:	bd70      	pop	{r4, r5, r6, pc}

000b5018 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5018:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b501a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b501c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5020:	db76      	blt.n	b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5022:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5026:	42b1      	cmp	r1, r6
   b5028:	da72      	bge.n	b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b502a:	2a00      	cmp	r2, #0
      __h += __y;
   b502c:	bfbe      	ittt	lt
   b502e:	189b      	addlt	r3, r3, r2
   b5030:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5032:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5034:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5038:	18d7      	adds	r7, r2, r3
   b503a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b503c:	bfc4      	itt	gt
   b503e:	1aa3      	subgt	r3, r4, r2
   b5040:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5042:	2b00      	cmp	r3, #0
   b5044:	dd64      	ble.n	b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5046:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b504a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b504c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5050:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5054:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5056:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b505a:	d023      	beq.n	b50a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b505c:	f1c2 0208 	rsb	r2, r2, #8
   b5060:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5062:	492d      	ldr	r1, [pc, #180]	; (b5118 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5064:	4293      	cmp	r3, r2
   b5066:	bf3c      	itt	cc
   b5068:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b506c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5070:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5072:	bf3c      	itt	cc
   b5074:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5078:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b507c:	2d01      	cmp	r5, #1
   b507e:	d007      	beq.n	b5090 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5080:	2d02      	cmp	r5, #2
   b5082:	d02e      	beq.n	b50e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5084:	b94d      	cbnz	r5, b509a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5086:	f817 c006 	ldrb.w	ip, [r7, r6]
   b508a:	ea2c 0101 	bic.w	r1, ip, r1
   b508e:	e003      	b.n	b5098 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5090:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5094:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5098:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b509a:	4293      	cmp	r3, r2
   b509c:	d338      	bcc.n	b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b509e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b50a2:	440c      	add	r4, r1
        h -= mod;
   b50a4:	1a9a      	subs	r2, r3, r2
   b50a6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b50a8:	2a07      	cmp	r2, #7
   b50aa:	d90e      	bls.n	b50ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b50ac:	2d02      	cmp	r5, #2
   b50ae:	d11d      	bne.n	b50ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b50b0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b50b2:	7821      	ldrb	r1, [r4, #0]
   b50b4:	43c9      	mvns	r1, r1
   b50b6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b50b8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b50ba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b50be:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b50c0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b50c2:	440c      	add	r4, r1
            } while(h >= 8);
   b50c4:	d8f5      	bhi.n	b50b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b50c6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b50ca:	b30a      	cbz	r2, b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b50cc:	4b13      	ldr	r3, [pc, #76]	; (b511c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b50ce:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b50d0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b50d2:	d01a      	beq.n	b510a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b50d4:	2d02      	cmp	r5, #2
   b50d6:	d01c      	beq.n	b5112 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b50d8:	b9d5      	cbnz	r5, b5110 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b50da:	7822      	ldrb	r2, [r4, #0]
   b50dc:	ea22 0303 	bic.w	r3, r2, r3
   b50e0:	e015      	b.n	b510e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b50e2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50e6:	ea81 010c 	eor.w	r1, r1, ip
   b50ea:	e7d5      	b.n	b5098 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b50ec:	1e29      	subs	r1, r5, #0
   b50ee:	bf18      	it	ne
   b50f0:	2101      	movne	r1, #1
   b50f2:	4249      	negs	r1, r1
   b50f4:	b2c9      	uxtb	r1, r1
   b50f6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b50f8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b50fa:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b50fc:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5100:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5102:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5104:	4434      	add	r4, r6
            } while(h >= 8);
   b5106:	d8f7      	bhi.n	b50f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5108:	e7dd      	b.n	b50c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b510a:	7822      	ldrb	r2, [r4, #0]
   b510c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b510e:	7023      	strb	r3, [r4, #0]
}
   b5110:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5112:	7822      	ldrb	r2, [r4, #0]
   b5114:	4053      	eors	r3, r2
   b5116:	e7fa      	b.n	b510e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5118:	000b6f84 	.word	0x000b6f84
   b511c:	000b6f8c 	.word	0x000b6f8c

000b5120 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5120:	b470      	push	{r4, r5, r6}
   b5122:	4614      	mov	r4, r2
  switch(rotation) {
   b5124:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5126:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b512a:	2a02      	cmp	r2, #2
   b512c:	d00d      	beq.n	b514a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b512e:	2a03      	cmp	r2, #3
   b5130:	d018      	beq.n	b5164 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5132:	2a01      	cmp	r2, #1
   b5134:	d111      	bne.n	b515a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5136:	8902      	ldrh	r2, [r0, #8]
   b5138:	43e4      	mvns	r4, r4
   b513a:	4414      	add	r4, r2
   b513c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b513e:	9603      	str	r6, [sp, #12]
   b5140:	460a      	mov	r2, r1
   b5142:	4621      	mov	r1, r4
}
   b5144:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5146:	f7ff bf67 	b.w	b5018 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b514a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b514c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b514e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5150:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5152:	4414      	add	r4, r2
    x -= (w-1);
   b5154:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5156:	b224      	sxth	r4, r4
    x -= (w-1);
   b5158:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b515a:	9603      	str	r6, [sp, #12]
   b515c:	4622      	mov	r2, r4
}
   b515e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5160:	f7ff bf16 	b.w	b4f90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5164:	8945      	ldrh	r5, [r0, #10]
   b5166:	4419      	add	r1, r3
   b5168:	1a69      	subs	r1, r5, r1
   b516a:	b209      	sxth	r1, r1
    break;
   b516c:	e7e7      	b.n	b513e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b516e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b516e:	b430      	push	{r4, r5}
   b5170:	4614      	mov	r4, r2
  switch(rotation) {
   b5172:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5174:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5178:	2a02      	cmp	r2, #2
   b517a:	d00d      	beq.n	b5198 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b517c:	2a03      	cmp	r2, #3
   b517e:	d018      	beq.n	b51b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5180:	2a01      	cmp	r2, #1
   b5182:	d111      	bne.n	b51a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5184:	18e2      	adds	r2, r4, r3
   b5186:	8904      	ldrh	r4, [r0, #8]
   b5188:	1aa4      	subs	r4, r4, r2
   b518a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b518c:	9502      	str	r5, [sp, #8]
   b518e:	460a      	mov	r2, r1
   b5190:	4621      	mov	r1, r4
}
   b5192:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5194:	f7ff befc 	b.w	b4f90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5198:	8902      	ldrh	r2, [r0, #8]
   b519a:	43c9      	mvns	r1, r1
   b519c:	4411      	add	r1, r2
    y -= (h-1);
   b519e:	18e2      	adds	r2, r4, r3
   b51a0:	8944      	ldrh	r4, [r0, #10]
   b51a2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b51a4:	b209      	sxth	r1, r1
    y -= (h-1);
   b51a6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b51a8:	9502      	str	r5, [sp, #8]
   b51aa:	4622      	mov	r2, r4
}
   b51ac:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b51ae:	f7ff bf33 	b.w	b5018 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b51b2:	8942      	ldrh	r2, [r0, #10]
   b51b4:	43c9      	mvns	r1, r1
   b51b6:	4411      	add	r1, r2
   b51b8:	b209      	sxth	r1, r1
    break;
   b51ba:	e7e7      	b.n	b518c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b51bc <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b51bc:	2100      	movs	r1, #0
   b51be:	220a      	movs	r2, #10
   b51c0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b51c4:	4770      	bx	lr

000b51c6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b51c6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b51c8:	b510      	push	{r4, lr}
   b51ca:	4604      	mov	r4, r0
    this->pin = pin;
   b51cc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b51ce:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b51d0:	b288      	uxth	r0, r1
   b51d2:	f001 f825 	bl	b6220 <digitalRead>
   b51d6:	b108      	cbz	r0, b51dc <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b51d8:	2303      	movs	r3, #3
   b51da:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b51dc:	f000 f8aa 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b51e0:	6020      	str	r0, [r4, #0]
#endif
}
   b51e2:	bd10      	pop	{r4, pc}

000b51e4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b51e4:	b538      	push	{r3, r4, r5, lr}
   b51e6:	460c      	mov	r4, r1
   b51e8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b51ea:	4611      	mov	r1, r2
   b51ec:	b2a0      	uxth	r0, r4
   b51ee:	f000 ffed 	bl	b61cc <pinMode>
  
  this->attach(pin);
   b51f2:	4621      	mov	r1, r4
   b51f4:	4628      	mov	r0, r5
}
   b51f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b51fa:	f7ff bfe4 	b.w	b51c6 <_ZN8Debounce6attachEi>
	...

000b5200 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5200:	b510      	push	{r4, lr}
   b5202:	4b06      	ldr	r3, [pc, #24]	; (b521c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5204:	6003      	str	r3, [r0, #0]
   b5206:	4604      	mov	r4, r0
	if (mutex) {
   b5208:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b520a:	b108      	cbz	r0, b5210 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b520c:	f000 f872 	bl	b52f4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5210:	4620      	mov	r0, r4
   b5212:	f7ff fbf3 	bl	b49fc <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5216:	4620      	mov	r0, r4
   b5218:	bd10      	pop	{r4, pc}
   b521a:	bf00      	nop
   b521c:	000b6fb8 	.word	0x000b6fb8

000b5220 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5220:	b510      	push	{r4, lr}
   b5222:	4604      	mov	r4, r0
}
   b5224:	f7ff ffec 	bl	b5200 <_ZN16OledWingAdafruitD1Ev>
   b5228:	4620      	mov	r0, r4
   b522a:	2170      	movs	r1, #112	; 0x70
   b522c:	f7fe ff33 	bl	b4096 <_ZdlPvj>
   b5230:	4620      	mov	r0, r4
   b5232:	bd10      	pop	{r4, pc}

000b5234 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5234:	b530      	push	{r4, r5, lr}
   b5236:	b085      	sub	sp, #20
   b5238:	4604      	mov	r4, r0
   b523a:	460d      	mov	r5, r1
   b523c:	f001 f81a 	bl	b6274 <_Z19__fetch_global_Wirev>
   b5240:	4a10      	ldr	r2, [pc, #64]	; (b5284 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5242:	4911      	ldr	r1, [pc, #68]	; (b5288 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5244:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b524c:	2180      	movs	r1, #128	; 0x80
   b524e:	4603      	mov	r3, r0
   b5250:	9200      	str	r2, [sp, #0]
   b5252:	4620      	mov	r0, r4
   b5254:	2220      	movs	r2, #32
   b5256:	f7ff fc49 	bl	b4aec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b525a:	4b0c      	ldr	r3, [pc, #48]	; (b528c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b525c:	6023      	str	r3, [r4, #0]
   b525e:	2300      	movs	r3, #0
   b5260:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5264:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5268:	f7ff ffa8 	bl	b51bc <_ZN8DebounceC1Ev>
   b526c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5270:	f7ff ffa4 	bl	b51bc <_ZN8DebounceC1Ev>
   b5274:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5278:	f7ff ffa0 	bl	b51bc <_ZN8DebounceC1Ev>
}
   b527c:	4620      	mov	r0, r4
   b527e:	b005      	add	sp, #20
   b5280:	bd30      	pop	{r4, r5, pc}
   b5282:	bf00      	nop
   b5284:	00061a80 	.word	0x00061a80
   b5288:	000186a0 	.word	0x000186a0
   b528c:	000b6fb8 	.word	0x000b6fb8

000b5290 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5290:	b513      	push	{r0, r1, r4, lr}
   b5292:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5294:	3050      	adds	r0, #80	; 0x50
   b5296:	f000 f825 	bl	b52e4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b529a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b529c:	07d9      	lsls	r1, r3, #31
   b529e:	d505      	bpl.n	b52ac <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b52a0:	2202      	movs	r2, #2
   b52a2:	2104      	movs	r1, #4
   b52a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b52a8:	f7ff ff9c 	bl	b51e4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b52ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b52ae:	079a      	lsls	r2, r3, #30
   b52b0:	d505      	bpl.n	b52be <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b52b2:	2200      	movs	r2, #0
   b52b4:	2103      	movs	r1, #3
   b52b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b52ba:	f7ff ff93 	bl	b51e4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b52be:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b52c0:	075b      	lsls	r3, r3, #29
   b52c2:	d505      	bpl.n	b52d0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b52c4:	2202      	movs	r2, #2
   b52c6:	4611      	mov	r1, r2
   b52c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b52cc:	f7ff ff8a 	bl	b51e4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b52d0:	2301      	movs	r3, #1
   b52d2:	9300      	str	r3, [sp, #0]
   b52d4:	223c      	movs	r2, #60	; 0x3c
   b52d6:	2102      	movs	r1, #2
   b52d8:	4620      	mov	r0, r4
   b52da:	f7ff fd0f 	bl	b4cfc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b52de:	b002      	add	sp, #8
   b52e0:	bd10      	pop	{r4, pc}
	...

000b52e4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b52e4:	b508      	push	{r3, lr}
   b52e6:	4b02      	ldr	r3, [pc, #8]	; (b52f0 <os_mutex_create+0xc>)
   b52e8:	681b      	ldr	r3, [r3, #0]
   b52ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b52ec:	9301      	str	r3, [sp, #4]
   b52ee:	bd08      	pop	{r3, pc}
   b52f0:	00030248 	.word	0x00030248

000b52f4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b52f4:	b508      	push	{r3, lr}
   b52f6:	4b02      	ldr	r3, [pc, #8]	; (b5300 <os_mutex_destroy+0xc>)
   b52f8:	681b      	ldr	r3, [r3, #0]
   b52fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b52fc:	9301      	str	r3, [sp, #4]
   b52fe:	bd08      	pop	{r3, pc}
   b5300:	00030248 	.word	0x00030248

000b5304 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5304:	b508      	push	{r3, lr}
   b5306:	4b02      	ldr	r3, [pc, #8]	; (b5310 <os_mutex_recursive_create+0xc>)
   b5308:	681b      	ldr	r3, [r3, #0]
   b530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b530c:	9301      	str	r3, [sp, #4]
   b530e:	bd08      	pop	{r3, pc}
   b5310:	00030248 	.word	0x00030248

000b5314 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5314:	b508      	push	{r3, lr}
   b5316:	4b02      	ldr	r3, [pc, #8]	; (b5320 <HAL_RNG_GetRandomNumber+0xc>)
   b5318:	681b      	ldr	r3, [r3, #0]
   b531a:	685b      	ldr	r3, [r3, #4]
   b531c:	9301      	str	r3, [sp, #4]
   b531e:	bd08      	pop	{r3, pc}
   b5320:	00030218 	.word	0x00030218

000b5324 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b02      	ldr	r3, [pc, #8]	; (b5330 <HAL_Delay_Microseconds+0xc>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	68db      	ldr	r3, [r3, #12]
   b532c:	9301      	str	r3, [sp, #4]
   b532e:	bd08      	pop	{r3, pc}
   b5330:	00030218 	.word	0x00030218

000b5334 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5334:	b508      	push	{r3, lr}
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5338:	681b      	ldr	r3, [r3, #0]
   b533a:	695b      	ldr	r3, [r3, #20]
   b533c:	9301      	str	r3, [sp, #4]
   b533e:	bd08      	pop	{r3, pc}
   b5340:	00030218 	.word	0x00030218

000b5344 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <HAL_Pin_Mode+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	689b      	ldr	r3, [r3, #8]
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	0003022c 	.word	0x0003022c

000b5354 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <HAL_Get_Pin_Mode+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	68db      	ldr	r3, [r3, #12]
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	0003022c 	.word	0x0003022c

000b5364 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <HAL_GPIO_Write+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	691b      	ldr	r3, [r3, #16]
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	0003022c 	.word	0x0003022c

000b5374 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <HAL_GPIO_Read+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	695b      	ldr	r3, [r3, #20]
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	0003022c 	.word	0x0003022c

000b5384 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <hal_i2c_set_speed+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	681b      	ldr	r3, [r3, #0]
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	00030228 	.word	0x00030228

000b5394 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <hal_i2c_begin+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	68db      	ldr	r3, [r3, #12]
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	00030228 	.word	0x00030228

000b53a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <hal_i2c_begin_transmission+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	699b      	ldr	r3, [r3, #24]
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	00030228 	.word	0x00030228

000b53b4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <hal_i2c_end_transmission+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	69db      	ldr	r3, [r3, #28]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	00030228 	.word	0x00030228

000b53c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <hal_i2c_write+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	6a1b      	ldr	r3, [r3, #32]
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	00030228 	.word	0x00030228

000b53d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <hal_i2c_available+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	00030228 	.word	0x00030228

000b53e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <hal_i2c_read+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	00030228 	.word	0x00030228

000b53f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <hal_i2c_peek+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030228 	.word	0x00030228

000b5404 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <hal_i2c_flush+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030228 	.word	0x00030228

000b5414 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <hal_i2c_is_enabled+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030228 	.word	0x00030228

000b5424 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <hal_i2c_init+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030228 	.word	0x00030228

000b5434 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <inet_inet_ntop+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	695b      	ldr	r3, [r3, #20]
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	00030264 	.word	0x00030264

000b5444 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <netdb_freeaddrinfo+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	689b      	ldr	r3, [r3, #8]
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	00030268 	.word	0x00030268

000b5454 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <netdb_getaddrinfo+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	68db      	ldr	r3, [r3, #12]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	00030268 	.word	0x00030268

000b5464 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <hal_spi_begin+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	681b      	ldr	r3, [r3, #0]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030230 	.word	0x00030230

000b5474 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <hal_spi_transfer+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	695b      	ldr	r3, [r3, #20]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030230 	.word	0x00030230

000b5484 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_spi_init+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	69db      	ldr	r3, [r3, #28]
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030230 	.word	0x00030230

000b5494 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_spi_is_enabled+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	6a1b      	ldr	r3, [r3, #32]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030230 	.word	0x00030230

000b54a4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <hal_spi_info+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030230 	.word	0x00030230

000b54b4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <hal_spi_set_settings+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	00030230 	.word	0x00030230

000b54c4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <hal_spi_acquire+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	00030230 	.word	0x00030230

000b54d4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_spi_release+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	00030230 	.word	0x00030230

000b54e4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_usart_write+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	68db      	ldr	r3, [r3, #12]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003023c 	.word	0x0003023c

000b54f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <hal_usart_available+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	691b      	ldr	r3, [r3, #16]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003023c 	.word	0x0003023c

000b5504 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <hal_usart_read+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	695b      	ldr	r3, [r3, #20]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003023c 	.word	0x0003023c

000b5514 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <hal_usart_peek+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	699b      	ldr	r3, [r3, #24]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003023c 	.word	0x0003023c

000b5524 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <hal_usart_flush+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	69db      	ldr	r3, [r3, #28]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003023c 	.word	0x0003023c

000b5534 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <hal_usart_is_enabled+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6a1b      	ldr	r3, [r3, #32]
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003023c 	.word	0x0003023c

000b5544 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <hal_usart_available_data_for_write+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	0003023c 	.word	0x0003023c

000b5554 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <hal_usart_begin_config+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	0003023c 	.word	0x0003023c

000b5564 <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <hal_usart_write_nine_bits+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	0003023c 	.word	0x0003023c

000b5574 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <hal_usart_init_ex+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	0003023c 	.word	0x0003023c

000b5584 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <HAL_USB_USART_Init+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	681b      	ldr	r3, [r3, #0]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	0003024c 	.word	0x0003024c

000b5594 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <HAL_USB_USART_Begin+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	685b      	ldr	r3, [r3, #4]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	0003024c 	.word	0x0003024c

000b55a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <HAL_USB_USART_Available_Data+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	691b      	ldr	r3, [r3, #16]
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	0003024c 	.word	0x0003024c

000b55b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	695b      	ldr	r3, [r3, #20]
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	0003024c 	.word	0x0003024c

000b55c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <HAL_USB_USART_Receive_Data+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	699b      	ldr	r3, [r3, #24]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	0003024c 	.word	0x0003024c

000b55d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <HAL_USB_USART_Send_Data+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	69db      	ldr	r3, [r3, #28]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	0003024c 	.word	0x0003024c

000b55e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <HAL_USB_USART_Flush_Data+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	6a1b      	ldr	r3, [r3, #32]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	0003024c 	.word	0x0003024c

000b55f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <panic_+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030260 	.word	0x00030260

000b5604 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <set_system_mode+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	685b      	ldr	r3, [r3, #4]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030220 	.word	0x00030220

000b5614 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <system_delay_ms+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	695b      	ldr	r3, [r3, #20]
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	00030220 	.word	0x00030220

000b5624 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <system_thread_set_state+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	00030220 	.word	0x00030220

000b5634 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b03      	ldr	r3, [pc, #12]	; (b5644 <system_ctrl_set_app_request_handler+0x10>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b563e:	9301      	str	r3, [sp, #4]
   b5640:	bd08      	pop	{r3, pc}
   b5642:	0000      	.short	0x0000
   b5644:	00030220 	.word	0x00030220

000b5648 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5648:	b508      	push	{r3, lr}
   b564a:	4b03      	ldr	r3, [pc, #12]	; (b5658 <system_ctrl_set_result+0x10>)
   b564c:	681b      	ldr	r3, [r3, #0]
   b564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5652:	9301      	str	r3, [sp, #4]
   b5654:	bd08      	pop	{r3, pc}
   b5656:	0000      	.short	0x0000
   b5658:	00030220 	.word	0x00030220

000b565c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030244 	.word	0x00030244

000b566c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <network_connect+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	685b      	ldr	r3, [r3, #4]
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030240 	.word	0x00030240

000b567c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <network_connecting+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	689b      	ldr	r3, [r3, #8]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030240 	.word	0x00030240

000b568c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <network_disconnect+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	68db      	ldr	r3, [r3, #12]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	00030240 	.word	0x00030240

000b569c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <network_ready+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	691b      	ldr	r3, [r3, #16]
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	00030240 	.word	0x00030240

000b56ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <network_on+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	695b      	ldr	r3, [r3, #20]
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	00030240 	.word	0x00030240

000b56bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <network_off+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	699b      	ldr	r3, [r3, #24]
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	00030240 	.word	0x00030240

000b56cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <network_listen+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	69db      	ldr	r3, [r3, #28]
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	00030240 	.word	0x00030240

000b56dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <network_listening+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	6a1b      	ldr	r3, [r3, #32]
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	00030240 	.word	0x00030240

000b56ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b56ec:	b508      	push	{r3, lr}
   b56ee:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <network_set_listen_timeout+0xc>)
   b56f0:	681b      	ldr	r3, [r3, #0]
   b56f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56f4:	9301      	str	r3, [sp, #4]
   b56f6:	bd08      	pop	{r3, pc}
   b56f8:	00030240 	.word	0x00030240

000b56fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b56fc:	b508      	push	{r3, lr}
   b56fe:	4b02      	ldr	r3, [pc, #8]	; (b5708 <network_get_listen_timeout+0xc>)
   b5700:	681b      	ldr	r3, [r3, #0]
   b5702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	bd08      	pop	{r3, pc}
   b5708:	00030240 	.word	0x00030240

000b570c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b02      	ldr	r3, [pc, #8]	; (b5718 <network_is_on+0xc>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5714:	9301      	str	r3, [sp, #4]
   b5716:	bd08      	pop	{r3, pc}
   b5718:	00030240 	.word	0x00030240

000b571c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b571c:	b508      	push	{r3, lr}
   b571e:	4b02      	ldr	r3, [pc, #8]	; (b5728 <network_is_off+0xc>)
   b5720:	681b      	ldr	r3, [r3, #0]
   b5722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5724:	9301      	str	r3, [sp, #4]
   b5726:	bd08      	pop	{r3, pc}
   b5728:	00030240 	.word	0x00030240

000b572c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b572c:	b508      	push	{r3, lr}
   b572e:	4b02      	ldr	r3, [pc, #8]	; (b5738 <malloc+0xc>)
   b5730:	681b      	ldr	r3, [r3, #0]
   b5732:	681b      	ldr	r3, [r3, #0]
   b5734:	9301      	str	r3, [sp, #4]
   b5736:	bd08      	pop	{r3, pc}
   b5738:	0003021c 	.word	0x0003021c

000b573c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b573c:	b508      	push	{r3, lr}
   b573e:	4b02      	ldr	r3, [pc, #8]	; (b5748 <free+0xc>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	685b      	ldr	r3, [r3, #4]
   b5744:	9301      	str	r3, [sp, #4]
   b5746:	bd08      	pop	{r3, pc}
   b5748:	0003021c 	.word	0x0003021c

000b574c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b574c:	b508      	push	{r3, lr}
   b574e:	4b02      	ldr	r3, [pc, #8]	; (b5758 <vsnprintf+0xc>)
   b5750:	681b      	ldr	r3, [r3, #0]
   b5752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5754:	9301      	str	r3, [sp, #4]
   b5756:	bd08      	pop	{r3, pc}
   b5758:	0003021c 	.word	0x0003021c

000b575c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b575c:	b508      	push	{r3, lr}
   b575e:	4b02      	ldr	r3, [pc, #8]	; (b5768 <__assert_func+0xc>)
   b5760:	681b      	ldr	r3, [r3, #0]
   b5762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	bd08      	pop	{r3, pc}
   b5768:	0003021c 	.word	0x0003021c

000b576c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <newlib_impure_ptr_callback+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	0003021c 	.word	0x0003021c

000b577c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b577c:	2100      	movs	r1, #0
   b577e:	f7ff bf49 	b.w	b5614 <system_delay_ms>
	...

000b5784 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5784:	4802      	ldr	r0, [pc, #8]	; (b5790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5786:	2300      	movs	r3, #0
   b5788:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b578a:	f7ff bdbb 	b.w	b5304 <os_mutex_recursive_create>
   b578e:	bf00      	nop
   b5790:	2003e6c4 	.word	0x2003e6c4

000b5794 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5794:	2200      	movs	r2, #0
   b5796:	6840      	ldr	r0, [r0, #4]
   b5798:	4611      	mov	r1, r2
   b579a:	f7ff bf9f 	b.w	b56dc <network_listening>

000b579e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b579e:	2200      	movs	r2, #0
   b57a0:	6840      	ldr	r0, [r0, #4]
   b57a2:	4611      	mov	r1, r2
   b57a4:	f7ff bfaa 	b.w	b56fc <network_get_listen_timeout>

000b57a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b57a8:	6840      	ldr	r0, [r0, #4]
   b57aa:	2200      	movs	r2, #0
   b57ac:	f7ff bf9e 	b.w	b56ec <network_set_listen_timeout>

000b57b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b57b0:	6840      	ldr	r0, [r0, #4]
   b57b2:	2200      	movs	r2, #0
   b57b4:	f081 0101 	eor.w	r1, r1, #1
   b57b8:	f7ff bf88 	b.w	b56cc <network_listen>

000b57bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b57bc:	2300      	movs	r3, #0
   b57be:	6840      	ldr	r0, [r0, #4]
   b57c0:	461a      	mov	r2, r3
   b57c2:	4619      	mov	r1, r3
   b57c4:	f7ff bf7a 	b.w	b56bc <network_off>

000b57c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b57c8:	2300      	movs	r3, #0
   b57ca:	6840      	ldr	r0, [r0, #4]
   b57cc:	461a      	mov	r2, r3
   b57ce:	4619      	mov	r1, r3
   b57d0:	f7ff bf6c 	b.w	b56ac <network_on>

000b57d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b57d4:	2200      	movs	r2, #0
   b57d6:	6840      	ldr	r0, [r0, #4]
   b57d8:	4611      	mov	r1, r2
   b57da:	f7ff bf5f 	b.w	b569c <network_ready>

000b57de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b57de:	2200      	movs	r2, #0
   b57e0:	6840      	ldr	r0, [r0, #4]
   b57e2:	4611      	mov	r1, r2
   b57e4:	f7ff bf4a 	b.w	b567c <network_connecting>

000b57e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b57e8:	6840      	ldr	r0, [r0, #4]
   b57ea:	2200      	movs	r2, #0
   b57ec:	2102      	movs	r1, #2
   b57ee:	f7ff bf4d 	b.w	b568c <network_disconnect>

000b57f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b57f2:	2300      	movs	r3, #0
   b57f4:	6840      	ldr	r0, [r0, #4]
   b57f6:	461a      	mov	r2, r3
   b57f8:	f7ff bf38 	b.w	b566c <network_connect>

000b57fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b57fc:	4b02      	ldr	r3, [pc, #8]	; (b5808 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b57fe:	2203      	movs	r2, #3
   b5800:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5802:	4a02      	ldr	r2, [pc, #8]	; (b580c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5804:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5806:	4770      	bx	lr
   b5808:	2003e6c8 	.word	0x2003e6c8
   b580c:	000b7010 	.word	0x000b7010

000b5810 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5810:	4770      	bx	lr

000b5812 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5814:	4606      	mov	r6, r0
   b5816:	4615      	mov	r5, r2
   b5818:	460c      	mov	r4, r1
   b581a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b581c:	42bc      	cmp	r4, r7
   b581e:	d006      	beq.n	b582e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5820:	6833      	ldr	r3, [r6, #0]
   b5822:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5826:	689b      	ldr	r3, [r3, #8]
   b5828:	4630      	mov	r0, r6
   b582a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b582c:	e7f6      	b.n	b581c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b582e:	4628      	mov	r0, r5
   b5830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5832 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5832:	7c00      	ldrb	r0, [r0, #16]
   b5834:	2200      	movs	r2, #0
   b5836:	f7ff bdc5 	b.w	b53c4 <hal_i2c_write>

000b583a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b583a:	7c00      	ldrb	r0, [r0, #16]
   b583c:	2100      	movs	r1, #0
   b583e:	f7ff bdc9 	b.w	b53d4 <hal_i2c_available>

000b5842 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5842:	7c00      	ldrb	r0, [r0, #16]
   b5844:	2100      	movs	r1, #0
   b5846:	f7ff bdcd 	b.w	b53e4 <hal_i2c_read>

000b584a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b584a:	7c00      	ldrb	r0, [r0, #16]
   b584c:	2100      	movs	r1, #0
   b584e:	f7ff bdd1 	b.w	b53f4 <hal_i2c_peek>

000b5852 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5852:	7c00      	ldrb	r0, [r0, #16]
   b5854:	2100      	movs	r1, #0
   b5856:	f7ff bdd5 	b.w	b5404 <hal_i2c_flush>

000b585a <_ZN7TwoWireD0Ev>:
   b585a:	b510      	push	{r4, lr}
   b585c:	2114      	movs	r1, #20
   b585e:	4604      	mov	r4, r0
   b5860:	f7fe fc19 	bl	b4096 <_ZdlPvj>
   b5864:	4620      	mov	r0, r4
   b5866:	bd10      	pop	{r4, pc}

000b5868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5868:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b586a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b586e:	4604      	mov	r4, r0
   b5870:	4608      	mov	r0, r1
   b5872:	2100      	movs	r1, #0
   b5874:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5878:	4b03      	ldr	r3, [pc, #12]	; (b5888 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b587a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b587c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b587e:	4611      	mov	r1, r2
   b5880:	f7ff fdd0 	bl	b5424 <hal_i2c_init>
}
   b5884:	4620      	mov	r0, r4
   b5886:	bd10      	pop	{r4, pc}
   b5888:	000b704c 	.word	0x000b704c

000b588c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b588c:	7c00      	ldrb	r0, [r0, #16]
   b588e:	2200      	movs	r2, #0
   b5890:	f7ff bd78 	b.w	b5384 <hal_i2c_set_speed>

000b5894 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5894:	2300      	movs	r3, #0
   b5896:	7c00      	ldrb	r0, [r0, #16]
   b5898:	461a      	mov	r2, r3
   b589a:	4619      	mov	r1, r3
   b589c:	f7ff bd7a 	b.w	b5394 <hal_i2c_begin>

000b58a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b58a0:	7c00      	ldrb	r0, [r0, #16]
   b58a2:	2200      	movs	r2, #0
   b58a4:	f7ff bd7e 	b.w	b53a4 <hal_i2c_begin_transmission>

000b58a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b58a8:	b2c9      	uxtb	r1, r1
   b58aa:	f7ff bff9 	b.w	b58a0 <_ZN7TwoWire17beginTransmissionEh>

000b58ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b58ae:	7c00      	ldrb	r0, [r0, #16]
   b58b0:	2200      	movs	r2, #0
   b58b2:	f7ff bd7f 	b.w	b53b4 <hal_i2c_end_transmission>

000b58b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b58b6:	2101      	movs	r1, #1
   b58b8:	f7ff bff9 	b.w	b58ae <_ZN7TwoWire15endTransmissionEh>

000b58bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b58bc:	4770      	bx	lr

000b58be <_ZN9IPAddressD0Ev>:
   b58be:	b510      	push	{r4, lr}
   b58c0:	2118      	movs	r1, #24
   b58c2:	4604      	mov	r4, r0
   b58c4:	f7fe fbe7 	bl	b4096 <_ZdlPvj>
   b58c8:	4620      	mov	r0, r4
   b58ca:	bd10      	pop	{r4, pc}

000b58cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b58ce:	7d03      	ldrb	r3, [r0, #20]
   b58d0:	2b06      	cmp	r3, #6
{
   b58d2:	b08d      	sub	sp, #52	; 0x34
   b58d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58d6:	f100 0704 	add.w	r7, r0, #4
   b58da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b58de:	d012      	beq.n	b5906 <_ZNK9IPAddress7printToER5Print+0x3a>
   b58e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b58e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b58e8:	220a      	movs	r2, #10
   b58ea:	4630      	mov	r0, r6
   b58ec:	f000 f953 	bl	b5b96 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b58f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b58f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b58f4:	d019      	beq.n	b592a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b58f6:	2c00      	cmp	r4, #0
   b58f8:	d0f4      	beq.n	b58e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b58fa:	212e      	movs	r1, #46	; 0x2e
   b58fc:	4630      	mov	r0, r6
   b58fe:	f000 f93b 	bl	b5b78 <_ZN5Print5printEc>
   b5902:	4404      	add	r4, r0
   b5904:	e7ee      	b.n	b58e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5906:	232f      	movs	r3, #47	; 0x2f
   b5908:	466a      	mov	r2, sp
   b590a:	4639      	mov	r1, r7
   b590c:	200a      	movs	r0, #10
		buf[0] = 0;
   b590e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5912:	f7ff fd8f 	bl	b5434 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5916:	4668      	mov	r0, sp
   b5918:	f000 fd5c 	bl	b63d4 <strlen>
   b591c:	6833      	ldr	r3, [r6, #0]
   b591e:	4602      	mov	r2, r0
   b5920:	68db      	ldr	r3, [r3, #12]
   b5922:	4669      	mov	r1, sp
   b5924:	4630      	mov	r0, r6
   b5926:	4798      	blx	r3
   b5928:	4604      	mov	r4, r0
    }
    return n;
}
   b592a:	4620      	mov	r0, r4
   b592c:	b00d      	add	sp, #52	; 0x34
   b592e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5930 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5930:	b510      	push	{r4, lr}
   b5932:	4b05      	ldr	r3, [pc, #20]	; (b5948 <_ZN9IPAddressC1Ev+0x18>)
   b5934:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5936:	2211      	movs	r2, #17
   b5938:	f840 3b04 	str.w	r3, [r0], #4
   b593c:	2100      	movs	r1, #0
   b593e:	f000 fd13 	bl	b6368 <memset>
}
   b5942:	4620      	mov	r0, r4
   b5944:	bd10      	pop	{r4, pc}
   b5946:	bf00      	nop
   b5948:	000b7074 	.word	0x000b7074

000b594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b594c:	4603      	mov	r3, r0
   b594e:	4a07      	ldr	r2, [pc, #28]	; (b596c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5950:	b510      	push	{r4, lr}
   b5952:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5956:	f101 0210 	add.w	r2, r1, #16
   b595a:	f851 4b04 	ldr.w	r4, [r1], #4
   b595e:	f843 4b04 	str.w	r4, [r3], #4
   b5962:	4291      	cmp	r1, r2
   b5964:	d1f9      	bne.n	b595a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5966:	780a      	ldrb	r2, [r1, #0]
   b5968:	701a      	strb	r2, [r3, #0]
}
   b596a:	bd10      	pop	{r4, pc}
   b596c:	000b7074 	.word	0x000b7074

000b5970 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5970:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5972:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5976:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b597a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b597e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5982:	2304      	movs	r3, #4
   b5984:	6041      	str	r1, [r0, #4]
   b5986:	7503      	strb	r3, [r0, #20]
}
   b5988:	bd10      	pop	{r4, pc}
	...

000b598c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b598c:	b507      	push	{r0, r1, r2, lr}
   b598e:	4b06      	ldr	r3, [pc, #24]	; (b59a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b5990:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5992:	78cb      	ldrb	r3, [r1, #3]
   b5994:	9300      	str	r3, [sp, #0]
   b5996:	788b      	ldrb	r3, [r1, #2]
   b5998:	784a      	ldrb	r2, [r1, #1]
   b599a:	7809      	ldrb	r1, [r1, #0]
   b599c:	f7ff ffe8 	bl	b5970 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59a0:	b003      	add	sp, #12
   b59a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b59a6:	bf00      	nop
   b59a8:	000b7074 	.word	0x000b7074

000b59ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b59ac:	4b01      	ldr	r3, [pc, #4]	; (b59b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b59ae:	4a02      	ldr	r2, [pc, #8]	; (b59b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b59b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b59b2:	4770      	bx	lr
   b59b4:	2003e6d0 	.word	0x2003e6d0
   b59b8:	000b7080 	.word	0x000b7080

000b59bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b59bc:	2300      	movs	r3, #0
   b59be:	6840      	ldr	r0, [r0, #4]
   b59c0:	461a      	mov	r2, r3
   b59c2:	f7ff be53 	b.w	b566c <network_connect>

000b59c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b59c6:	6840      	ldr	r0, [r0, #4]
   b59c8:	2200      	movs	r2, #0
   b59ca:	2102      	movs	r1, #2
   b59cc:	f7ff be5e 	b.w	b568c <network_disconnect>

000b59d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b59d0:	2200      	movs	r2, #0
   b59d2:	6840      	ldr	r0, [r0, #4]
   b59d4:	4611      	mov	r1, r2
   b59d6:	f7ff be51 	b.w	b567c <network_connecting>

000b59da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b59da:	2200      	movs	r2, #0
   b59dc:	6840      	ldr	r0, [r0, #4]
   b59de:	4611      	mov	r1, r2
   b59e0:	f7ff be5c 	b.w	b569c <network_ready>

000b59e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b59e4:	2300      	movs	r3, #0
   b59e6:	6840      	ldr	r0, [r0, #4]
   b59e8:	461a      	mov	r2, r3
   b59ea:	4619      	mov	r1, r3
   b59ec:	f7ff be5e 	b.w	b56ac <network_on>

000b59f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b59f0:	2300      	movs	r3, #0
   b59f2:	6840      	ldr	r0, [r0, #4]
   b59f4:	461a      	mov	r2, r3
   b59f6:	4619      	mov	r1, r3
   b59f8:	f7ff be60 	b.w	b56bc <network_off>

000b59fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b59fc:	6840      	ldr	r0, [r0, #4]
   b59fe:	2100      	movs	r1, #0
   b5a00:	f7ff be84 	b.w	b570c <network_is_on>

000b5a04 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5a04:	6840      	ldr	r0, [r0, #4]
   b5a06:	2100      	movs	r1, #0
   b5a08:	f7ff be88 	b.w	b571c <network_is_off>

000b5a0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5a0c:	6840      	ldr	r0, [r0, #4]
   b5a0e:	2200      	movs	r2, #0
   b5a10:	f081 0101 	eor.w	r1, r1, #1
   b5a14:	f7ff be5a 	b.w	b56cc <network_listen>

000b5a18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5a18:	6840      	ldr	r0, [r0, #4]
   b5a1a:	2200      	movs	r2, #0
   b5a1c:	f7ff be66 	b.w	b56ec <network_set_listen_timeout>

000b5a20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5a20:	2200      	movs	r2, #0
   b5a22:	6840      	ldr	r0, [r0, #4]
   b5a24:	4611      	mov	r1, r2
   b5a26:	f7ff be69 	b.w	b56fc <network_get_listen_timeout>

000b5a2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5a2a:	2200      	movs	r2, #0
   b5a2c:	6840      	ldr	r0, [r0, #4]
   b5a2e:	4611      	mov	r1, r2
   b5a30:	f7ff be54 	b.w	b56dc <network_listening>

000b5a34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a38:	b095      	sub	sp, #84	; 0x54
   b5a3a:	4614      	mov	r4, r2
   b5a3c:	460d      	mov	r5, r1
   b5a3e:	4607      	mov	r7, r0
    IPAddress addr;
   b5a40:	f7ff ff76 	bl	b5930 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5a44:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5a46:	221c      	movs	r2, #28
   b5a48:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5a4a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5a4c:	f000 fc8c 	bl	b6368 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5a50:	2340      	movs	r3, #64	; 0x40
   b5a52:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5a54:	4620      	mov	r0, r4
   b5a56:	466b      	mov	r3, sp
   b5a58:	aa0c      	add	r2, sp, #48	; 0x30
   b5a5a:	2100      	movs	r1, #0
   b5a5c:	f7ff fcfa 	bl	b5454 <netdb_getaddrinfo>
    if (!r) {
   b5a60:	4604      	mov	r4, r0
   b5a62:	2800      	cmp	r0, #0
   b5a64:	d14b      	bne.n	b5afe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a66:	4602      	mov	r2, r0
   b5a68:	2101      	movs	r1, #1
   b5a6a:	6868      	ldr	r0, [r5, #4]
   b5a6c:	f7ff fe16 	bl	b569c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a70:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a72:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a74:	4622      	mov	r2, r4
   b5a76:	6868      	ldr	r0, [r5, #4]
   b5a78:	f7ff fe10 	bl	b569c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a7c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a7e:	4681      	mov	r9, r0
        bool ok = false;
   b5a80:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a82:	2e00      	cmp	r6, #0
   b5a84:	d03b      	beq.n	b5afe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a86:	2900      	cmp	r1, #0
   b5a88:	d139      	bne.n	b5afe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a8a:	6873      	ldr	r3, [r6, #4]
   b5a8c:	2b02      	cmp	r3, #2
   b5a8e:	d003      	beq.n	b5a98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a90:	2b0a      	cmp	r3, #10
   b5a92:	d011      	beq.n	b5ab8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a94:	69f6      	ldr	r6, [r6, #28]
   b5a96:	e7f4      	b.n	b5a82 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5a98:	f1b8 0f00 	cmp.w	r8, #0
   b5a9c:	d0fa      	beq.n	b5a94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5a9e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5aa0:	a806      	add	r0, sp, #24
   b5aa2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5aa4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5aa6:	f7ff ff71 	bl	b598c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5aac:	1d3c      	adds	r4, r7, #4
   b5aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ab0:	682b      	ldr	r3, [r5, #0]
   b5ab2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ab4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ab6:	e7ed      	b.n	b5a94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ab8:	f1b9 0f00 	cmp.w	r9, #0
   b5abc:	d0ea      	beq.n	b5a94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5abe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ac0:	2210      	movs	r2, #16
   b5ac2:	a801      	add	r0, sp, #4
   b5ac4:	f000 fc50 	bl	b6368 <memset>
                    a.v = 6;
   b5ac8:	2306      	movs	r3, #6
   b5aca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5ace:	ad01      	add	r5, sp, #4
   b5ad0:	f104 0308 	add.w	r3, r4, #8
   b5ad4:	3418      	adds	r4, #24
   b5ad6:	6818      	ldr	r0, [r3, #0]
   b5ad8:	6859      	ldr	r1, [r3, #4]
   b5ada:	462a      	mov	r2, r5
   b5adc:	c203      	stmia	r2!, {r0, r1}
   b5ade:	3308      	adds	r3, #8
   b5ae0:	42a3      	cmp	r3, r4
   b5ae2:	4615      	mov	r5, r2
   b5ae4:	d1f7      	bne.n	b5ad6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ae6:	a901      	add	r1, sp, #4
   b5ae8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5aea:	ad07      	add	r5, sp, #28
   b5aec:	f7ff ff2e 	bl	b594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5af2:	1d3c      	adds	r4, r7, #4
   b5af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5af6:	682b      	ldr	r3, [r5, #0]
   b5af8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5afa:	4649      	mov	r1, r9
   b5afc:	e7ca      	b.n	b5a94 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5afe:	9800      	ldr	r0, [sp, #0]
   b5b00:	f7ff fca0 	bl	b5444 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5b04:	4638      	mov	r0, r7
   b5b06:	b015      	add	sp, #84	; 0x54
   b5b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5b0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5b0c:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5b0e:	4a03      	ldr	r2, [pc, #12]	; (b5b1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5b10:	601a      	str	r2, [r3, #0]
   b5b12:	2200      	movs	r2, #0
   b5b14:	605a      	str	r2, [r3, #4]

} // spark
   b5b16:	4770      	bx	lr
   b5b18:	2003e6d4 	.word	0x2003e6d4
   b5b1c:	000b708c 	.word	0x000b708c

000b5b20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b22:	4606      	mov	r6, r0
   b5b24:	460d      	mov	r5, r1
  size_t n = 0;
   b5b26:	188f      	adds	r7, r1, r2
   b5b28:	2400      	movs	r4, #0
  while (size--) {
   b5b2a:	42bd      	cmp	r5, r7
   b5b2c:	d00c      	beq.n	b5b48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5b2e:	6833      	ldr	r3, [r6, #0]
   b5b30:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5b34:	689b      	ldr	r3, [r3, #8]
   b5b36:	4630      	mov	r0, r6
   b5b38:	4798      	blx	r3
     if (chunk>=0)
   b5b3a:	1e03      	subs	r3, r0, #0
   b5b3c:	db01      	blt.n	b5b42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5b3e:	441c      	add	r4, r3
  while (size--) {
   b5b40:	e7f3      	b.n	b5b2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5b42:	2c00      	cmp	r4, #0
   b5b44:	bf08      	it	eq
   b5b46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5b48:	4620      	mov	r0, r4
   b5b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b4c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5b4c:	b513      	push	{r0, r1, r4, lr}
   b5b4e:	4604      	mov	r4, r0
    }
   b5b50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5b52:	b159      	cbz	r1, b5b6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5b54:	9101      	str	r1, [sp, #4]
   b5b56:	f000 fc3d 	bl	b63d4 <strlen>
   b5b5a:	6823      	ldr	r3, [r4, #0]
   b5b5c:	9901      	ldr	r1, [sp, #4]
   b5b5e:	68db      	ldr	r3, [r3, #12]
   b5b60:	4602      	mov	r2, r0
   b5b62:	4620      	mov	r0, r4
    }
   b5b64:	b002      	add	sp, #8
   b5b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5b6a:	4718      	bx	r3
    }
   b5b6c:	b002      	add	sp, #8
   b5b6e:	bd10      	pop	{r4, pc}

000b5b70 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5b70:	b508      	push	{r3, lr}
  return write(str);
   b5b72:	f7ff ffeb 	bl	b5b4c <_ZN5Print5writeEPKc>
}
   b5b76:	bd08      	pop	{r3, pc}

000b5b78 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5b78:	6803      	ldr	r3, [r0, #0]
   b5b7a:	689b      	ldr	r3, [r3, #8]
   b5b7c:	4718      	bx	r3

000b5b7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5b7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5b80:	210d      	movs	r1, #13
{
   b5b82:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5b84:	f7ff fff8 	bl	b5b78 <_ZN5Print5printEc>
  n += print('\n');
   b5b88:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5b8a:	4604      	mov	r4, r0
  n += print('\n');
   b5b8c:	4628      	mov	r0, r5
   b5b8e:	f7ff fff3 	bl	b5b78 <_ZN5Print5printEc>
  return n;
}
   b5b92:	4420      	add	r0, r4
   b5b94:	bd38      	pop	{r3, r4, r5, pc}

000b5b96 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5b96:	b530      	push	{r4, r5, lr}
   b5b98:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5b9a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5b9c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5b9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5ba2:	bf98      	it	ls
   b5ba4:	220a      	movls	r2, #10
   b5ba6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5ba8:	460d      	mov	r5, r1
   b5baa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5bae:	fb01 5312 	mls	r3, r1, r2, r5
   b5bb2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5bb6:	2b09      	cmp	r3, #9
   b5bb8:	bf94      	ite	ls
   b5bba:	3330      	addls	r3, #48	; 0x30
   b5bbc:	3337      	addhi	r3, #55	; 0x37
   b5bbe:	b2db      	uxtb	r3, r3
  } while(n);
   b5bc0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5bc2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5bc6:	d9ef      	bls.n	b5ba8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5bc8:	4621      	mov	r1, r4
   b5bca:	f7ff ffbf 	bl	b5b4c <_ZN5Print5writeEPKc>
}
   b5bce:	b00b      	add	sp, #44	; 0x2c
   b5bd0:	bd30      	pop	{r4, r5, pc}

000b5bd2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5bd6:	b086      	sub	sp, #24
   b5bd8:	af00      	add	r7, sp, #0
   b5bda:	4605      	mov	r5, r0
   b5bdc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5bde:	1d38      	adds	r0, r7, #4
   b5be0:	2114      	movs	r1, #20
{
   b5be2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5be4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5be6:	f7ff fdb1 	bl	b574c <vsnprintf>

    if (n<bufsize)
   b5bea:	2813      	cmp	r0, #19
   b5bec:	d80e      	bhi.n	b5c0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5bee:	1d39      	adds	r1, r7, #4
   b5bf0:	4628      	mov	r0, r5
   b5bf2:	f7ff ffab 	bl	b5b4c <_ZN5Print5writeEPKc>
   b5bf6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5bf8:	b11e      	cbz	r6, b5c02 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5bfa:	4628      	mov	r0, r5
   b5bfc:	f7ff ffbf 	bl	b5b7e <_ZN5Print7printlnEv>
   b5c00:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5c02:	4620      	mov	r0, r4
   b5c04:	3718      	adds	r7, #24
   b5c06:	46bd      	mov	sp, r7
   b5c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5c0c:	f100 0308 	add.w	r3, r0, #8
   b5c10:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5c14:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5c16:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5c1a:	4622      	mov	r2, r4
   b5c1c:	1c41      	adds	r1, r0, #1
   b5c1e:	683b      	ldr	r3, [r7, #0]
   b5c20:	4668      	mov	r0, sp
   b5c22:	f7ff fd93 	bl	b574c <vsnprintf>
  return write(str);
   b5c26:	4669      	mov	r1, sp
   b5c28:	4628      	mov	r0, r5
   b5c2a:	f7ff ff8f 	bl	b5b4c <_ZN5Print5writeEPKc>
   b5c2e:	4604      	mov	r4, r0
   b5c30:	46c5      	mov	sp, r8
   b5c32:	e7e1      	b.n	b5bf8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5c34 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5c34:	4b01      	ldr	r3, [pc, #4]	; (b5c3c <_GLOBAL__sub_I_RGB+0x8>)
   b5c36:	2200      	movs	r2, #0
   b5c38:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c3a:	4770      	bx	lr
   b5c3c:	2003e6dc 	.word	0x2003e6dc

000b5c40 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5c40:	2100      	movs	r1, #0
   b5c42:	f7ff bc47 	b.w	b54d4 <hal_spi_release>

000b5c46 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5c46:	2100      	movs	r1, #0
   b5c48:	f7ff bc3c 	b.w	b54c4 <hal_spi_acquire>

000b5c4c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5c4c:	b510      	push	{r4, lr}
   b5c4e:	4604      	mov	r4, r0
   b5c50:	4608      	mov	r0, r1
{
    _spi = spi;
   b5c52:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5c54:	f7ff fc16 	bl	b5484 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5c58:	2300      	movs	r3, #0
   b5c5a:	6063      	str	r3, [r4, #4]
}
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	bd10      	pop	{r4, pc}

000b5c60 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5c60:	b513      	push	{r0, r1, r4, lr}
   b5c62:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5c64:	7800      	ldrb	r0, [r0, #0]
   b5c66:	f7ff ffee 	bl	b5c46 <_ZN8SPIClass4lockEv.isra.0>
   b5c6a:	b958      	cbnz	r0, b5c84 <_ZN8SPIClass5beginEv+0x24>
   b5c6c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5c6e:	9001      	str	r0, [sp, #4]
   b5c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5c74:	f7ff fbf6 	bl	b5464 <hal_spi_begin>
        unlock();
   b5c78:	9801      	ldr	r0, [sp, #4]
    }
}
   b5c7a:	b002      	add	sp, #8
   b5c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5c80:	f7ff bfde 	b.w	b5c40 <_ZN8SPIClass6unlockEv.isra.0>
   b5c84:	b002      	add	sp, #8
   b5c86:	bd10      	pop	{r4, pc}

000b5c88 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5c88:	7800      	ldrb	r0, [r0, #0]
   b5c8a:	f7ff bfd9 	b.w	b5c40 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5c90 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5c90:	0840      	lsrs	r0, r0, #1
{
   b5c92:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5c94:	6018      	str	r0, [r3, #0]
   b5c96:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5c98:	6818      	ldr	r0, [r3, #0]
   b5c9a:	4288      	cmp	r0, r1
   b5c9c:	b2e5      	uxtb	r5, r4
   b5c9e:	d906      	bls.n	b5cae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5ca0:	3401      	adds	r4, #1
   b5ca2:	2c08      	cmp	r4, #8
   b5ca4:	d002      	beq.n	b5cac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5ca6:	0840      	lsrs	r0, r0, #1
   b5ca8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5caa:	e7f5      	b.n	b5c98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5cac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5cb0:	5d5b      	ldrb	r3, [r3, r5]
   b5cb2:	7013      	strb	r3, [r2, #0]
}
   b5cb4:	bd30      	pop	{r4, r5, pc}
   b5cb6:	bf00      	nop
   b5cb8:	000b70c0 	.word	0x000b70c0

000b5cbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cc0:	4606      	mov	r6, r0
   b5cc2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5cc4:	7800      	ldrb	r0, [r0, #0]
{
   b5cc6:	460c      	mov	r4, r1
    CHECK(lock());
   b5cc8:	f7ff ffbd 	bl	b5c46 <_ZN8SPIClass4lockEv.isra.0>
   b5ccc:	2800      	cmp	r0, #0
   b5cce:	db1b      	blt.n	b5d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5cd0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5cd2:	2214      	movs	r2, #20
   b5cd4:	2100      	movs	r1, #0
   b5cd6:	a809      	add	r0, sp, #36	; 0x24
   b5cd8:	f000 fb46 	bl	b6368 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5cdc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5cde:	2200      	movs	r2, #0
   b5ce0:	a909      	add	r1, sp, #36	; 0x24
   b5ce2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5ce4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5ce8:	f7ff fbdc 	bl	b54a4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5cec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5cf0:	b113      	cbz	r3, b5cf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5cf2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5cf6:	b155      	cbz	r5, b5d0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5cf8:	2700      	movs	r7, #0
   b5cfa:	46b9      	mov	r9, r7
   b5cfc:	46b8      	mov	r8, r7
   b5cfe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5d00:	7923      	ldrb	r3, [r4, #4]
   b5d02:	b15d      	cbz	r5, b5d1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5d04:	b1c3      	cbz	r3, b5d38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5d06:	2000      	movs	r0, #0
}
   b5d08:	b00f      	add	sp, #60	; 0x3c
   b5d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5d0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5d12:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5d16:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5d1a:	e7f1      	b.n	b5d00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5d1c:	2b00      	cmp	r3, #0
   b5d1e:	d135      	bne.n	b5d8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5d20:	68a3      	ldr	r3, [r4, #8]
   b5d22:	4543      	cmp	r3, r8
   b5d24:	d108      	bne.n	b5d38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5d26:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d2a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d32:	89a3      	ldrh	r3, [r4, #12]
   b5d34:	429a      	cmp	r2, r3
   b5d36:	d0e6      	beq.n	b5d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5d38:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d3a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5d3c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d40:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5d42:	ab04      	add	r3, sp, #16
   b5d44:	f10d 020f 	add.w	r2, sp, #15
   b5d48:	f7ff ffa2 	bl	b5c90 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5d4c:	7921      	ldrb	r1, [r4, #4]
   b5d4e:	b985      	cbnz	r5, b5d72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5d50:	b989      	cbnz	r1, b5d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d52:	68a3      	ldr	r3, [r4, #8]
   b5d54:	4543      	cmp	r3, r8
   b5d56:	d30e      	bcc.n	b5d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5d58:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d5c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d64:	89a3      	ldrh	r3, [r4, #12]
   b5d66:	429a      	cmp	r2, r3
   b5d68:	d105      	bne.n	b5d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5d6a:	9b04      	ldr	r3, [sp, #16]
   b5d6c:	4543      	cmp	r3, r8
   b5d6e:	d102      	bne.n	b5d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d70:	e7c9      	b.n	b5d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5d72:	2900      	cmp	r1, #0
   b5d74:	d1f9      	bne.n	b5d6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5d76:	2300      	movs	r3, #0
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	7b63      	ldrb	r3, [r4, #13]
   b5d7c:	9300      	str	r3, [sp, #0]
   b5d7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5d82:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5d84:	7830      	ldrb	r0, [r6, #0]
   b5d86:	f7ff fb95 	bl	b54b4 <hal_spi_set_settings>
   b5d8a:	e7bc      	b.n	b5d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5d8c:	e9cd 5500 	strd	r5, r5, [sp]
   b5d90:	462b      	mov	r3, r5
   b5d92:	462a      	mov	r2, r5
   b5d94:	2101      	movs	r1, #1
   b5d96:	e7f5      	b.n	b5d84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5d98 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5d98:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5d9a:	7800      	ldrb	r0, [r0, #0]
   b5d9c:	f7ff fb6a 	bl	b5474 <hal_spi_transfer>
}
   b5da0:	b2c0      	uxtb	r0, r0
   b5da2:	bd08      	pop	{r3, pc}

000b5da4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5da4:	4b05      	ldr	r3, [pc, #20]	; (b5dbc <_GLOBAL__sub_I_System+0x18>)
   b5da6:	2202      	movs	r2, #2
   b5da8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5daa:	4b05      	ldr	r3, [pc, #20]	; (b5dc0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5dac:	4a05      	ldr	r2, [pc, #20]	; (b5dc4 <_GLOBAL__sub_I_System+0x20>)
   b5dae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5db0:	2000      	movs	r0, #0
   b5db2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5db6:	f7ff bc25 	b.w	b5604 <set_system_mode>
   b5dba:	bf00      	nop
   b5dbc:	2003e6f8 	.word	0x2003e6f8
   b5dc0:	2003e6ec 	.word	0x2003e6ec
   b5dc4:	ffff0000 	.word	0xffff0000

000b5dc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5dc8:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5dca:	681a      	ldr	r2, [r3, #0]
   b5dcc:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5dce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5dd0:	4770      	bx	lr
   b5dd2:	bf00      	nop
   b5dd4:	2003e5d0 	.word	0x2003e5d0
   b5dd8:	2003e6fc 	.word	0x2003e6fc

000b5ddc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5ddc:	4770      	bx	lr

000b5dde <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5dde:	7441      	strb	r1, [r0, #17]
}
   b5de0:	4770      	bx	lr

000b5de2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5de2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5de4:	7c00      	ldrb	r0, [r0, #16]
   b5de6:	f7ff fbad 	bl	b5544 <hal_usart_available_data_for_write>
}
   b5dea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dee:	bd08      	pop	{r3, pc}

000b5df0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5df0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5df2:	7c00      	ldrb	r0, [r0, #16]
   b5df4:	f7ff fb7e 	bl	b54f4 <hal_usart_available>
}
   b5df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dfc:	bd08      	pop	{r3, pc}

000b5dfe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5dfe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5e00:	7c00      	ldrb	r0, [r0, #16]
   b5e02:	f7ff fb87 	bl	b5514 <hal_usart_peek>
}
   b5e06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e0a:	bd08      	pop	{r3, pc}

000b5e0c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5e0c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5e0e:	7c00      	ldrb	r0, [r0, #16]
   b5e10:	f7ff fb78 	bl	b5504 <hal_usart_read>
}
   b5e14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e18:	bd08      	pop	{r3, pc}

000b5e1a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5e1a:	7c00      	ldrb	r0, [r0, #16]
   b5e1c:	f7ff bb82 	b.w	b5524 <hal_usart_flush>

000b5e20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e22:	7c45      	ldrb	r5, [r0, #17]
{
   b5e24:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e26:	b12d      	cbz	r5, b5e34 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5e28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5e2a:	b003      	add	sp, #12
   b5e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5e30:	f7ff bb58 	b.w	b54e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e34:	7c00      	ldrb	r0, [r0, #16]
   b5e36:	9101      	str	r1, [sp, #4]
   b5e38:	f7ff fb84 	bl	b5544 <hal_usart_available_data_for_write>
   b5e3c:	2800      	cmp	r0, #0
   b5e3e:	9901      	ldr	r1, [sp, #4]
   b5e40:	dcf2      	bgt.n	b5e28 <_ZN11USARTSerial5writeEh+0x8>
}
   b5e42:	4628      	mov	r0, r5
   b5e44:	b003      	add	sp, #12
   b5e46:	bd30      	pop	{r4, r5, pc}

000b5e48 <_ZN11USARTSerialD0Ev>:
   b5e48:	b510      	push	{r4, lr}
   b5e4a:	2114      	movs	r1, #20
   b5e4c:	4604      	mov	r4, r0
   b5e4e:	f7fe f922 	bl	b4096 <_ZdlPvj>
   b5e52:	4620      	mov	r0, r4
   b5e54:	bd10      	pop	{r4, pc}
	...

000b5e58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5e58:	b510      	push	{r4, lr}
   b5e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e5e:	4604      	mov	r4, r0
   b5e60:	4608      	mov	r0, r1
   b5e62:	4611      	mov	r1, r2
   b5e64:	2200      	movs	r2, #0
   b5e66:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5e6a:	4b04      	ldr	r3, [pc, #16]	; (b5e7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5e6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e6e:	2301      	movs	r3, #1
  _serial = serial;
   b5e70:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e72:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5e74:	f7ff fb7e 	bl	b5574 <hal_usart_init_ex>
}
   b5e78:	4620      	mov	r0, r4
   b5e7a:	bd10      	pop	{r4, pc}
   b5e7c:	000b70ec 	.word	0x000b70ec

000b5e80 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5e80:	7c00      	ldrb	r0, [r0, #16]
   b5e82:	2300      	movs	r3, #0
   b5e84:	f7ff bb66 	b.w	b5554 <hal_usart_begin_config>

000b5e88 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5e88:	2200      	movs	r2, #0
   b5e8a:	f7ff bff9 	b.w	b5e80 <_ZN11USARTSerial5beginEmm>

000b5e8e <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
   b5e8e:	7c00      	ldrb	r0, [r0, #16]
   b5e90:	f7ff bb68 	b.w	b5564 <hal_usart_write_nine_bits>

000b5e94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e94:	7441      	strb	r1, [r0, #17]
}
   b5e96:	4770      	bx	lr

000b5e98 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e98:	4770      	bx	lr

000b5e9a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5e9a:	4770      	bx	lr

000b5e9c <_ZN9USBSerial4readEv>:
{
   b5e9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5e9e:	2100      	movs	r1, #0
   b5ea0:	7c00      	ldrb	r0, [r0, #16]
   b5ea2:	f7ff fb8f 	bl	b55c4 <HAL_USB_USART_Receive_Data>
}
   b5ea6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eaa:	bd08      	pop	{r3, pc}

000b5eac <_ZN9USBSerial4peekEv>:
{
   b5eac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5eae:	2101      	movs	r1, #1
   b5eb0:	7c00      	ldrb	r0, [r0, #16]
   b5eb2:	f7ff fb87 	bl	b55c4 <HAL_USB_USART_Receive_Data>
}
   b5eb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eba:	bd08      	pop	{r3, pc}

000b5ebc <_ZN9USBSerial17availableForWriteEv>:
{
   b5ebc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5ebe:	7c00      	ldrb	r0, [r0, #16]
   b5ec0:	f7ff fb78 	bl	b55b4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5ec4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ec8:	bd08      	pop	{r3, pc}

000b5eca <_ZN9USBSerial9availableEv>:
{
   b5eca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ecc:	7c00      	ldrb	r0, [r0, #16]
   b5ece:	f7ff fb69 	bl	b55a4 <HAL_USB_USART_Available_Data>
}
   b5ed2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ed6:	bd08      	pop	{r3, pc}

000b5ed8 <_ZN9USBSerial5writeEh>:
{
   b5ed8:	b513      	push	{r0, r1, r4, lr}
   b5eda:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5edc:	7c00      	ldrb	r0, [r0, #16]
{
   b5ede:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ee0:	f7ff fb68 	bl	b55b4 <HAL_USB_USART_Available_Data_For_Write>
   b5ee4:	2800      	cmp	r0, #0
   b5ee6:	9901      	ldr	r1, [sp, #4]
   b5ee8:	dc01      	bgt.n	b5eee <_ZN9USBSerial5writeEh+0x16>
   b5eea:	7c60      	ldrb	r0, [r4, #17]
   b5eec:	b120      	cbz	r0, b5ef8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5eee:	7c20      	ldrb	r0, [r4, #16]
   b5ef0:	f7ff fb70 	bl	b55d4 <HAL_USB_USART_Send_Data>
   b5ef4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5ef8:	b002      	add	sp, #8
   b5efa:	bd10      	pop	{r4, pc}

000b5efc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5efc:	7c00      	ldrb	r0, [r0, #16]
   b5efe:	f7ff bb71 	b.w	b55e4 <HAL_USB_USART_Flush_Data>

000b5f02 <_ZN9USBSerialD0Ev>:
   b5f02:	b510      	push	{r4, lr}
   b5f04:	2114      	movs	r1, #20
   b5f06:	4604      	mov	r4, r0
   b5f08:	f7fe f8c5 	bl	b4096 <_ZdlPvj>
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	bd10      	pop	{r4, pc}

000b5f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5f10:	b510      	push	{r4, lr}
   b5f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f16:	4604      	mov	r4, r0
   b5f18:	4608      	mov	r0, r1
   b5f1a:	2100      	movs	r1, #0
   b5f1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5f20:	4b04      	ldr	r3, [pc, #16]	; (b5f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5f22:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f24:	2301      	movs	r3, #1
  _serial = serial;
   b5f26:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f28:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5f2a:	4611      	mov	r1, r2
   b5f2c:	f7ff fb2a 	bl	b5584 <HAL_USB_USART_Init>
}
   b5f30:	4620      	mov	r0, r4
   b5f32:	bd10      	pop	{r4, pc}
   b5f34:	000b711c 	.word	0x000b711c

000b5f38 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5f38:	7c00      	ldrb	r0, [r0, #16]
   b5f3a:	2200      	movs	r2, #0
   b5f3c:	f7ff bb2a 	b.w	b5594 <HAL_USB_USART_Begin>

000b5f40 <_Z19acquireSerialBufferv>:
{
   b5f40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5f42:	2214      	movs	r2, #20
{
   b5f44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5f46:	2100      	movs	r1, #0
   b5f48:	f000 fa0e 	bl	b6368 <memset>
}
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	bd10      	pop	{r4, pc}

000b5f50 <_Z16_fetch_usbserialv>:
{
   b5f50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f52:	4c0f      	ldr	r4, [pc, #60]	; (b5f90 <_Z16_fetch_usbserialv+0x40>)
{
   b5f54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5f56:	a803      	add	r0, sp, #12
   b5f58:	f7ff fff2 	bl	b5f40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f5c:	7821      	ldrb	r1, [r4, #0]
   b5f5e:	f3bf 8f5b 	dmb	ish
   b5f62:	f011 0101 	ands.w	r1, r1, #1
   b5f66:	d10f      	bne.n	b5f88 <_Z16_fetch_usbserialv+0x38>
   b5f68:	4620      	mov	r0, r4
   b5f6a:	9101      	str	r1, [sp, #4]
   b5f6c:	f7fe f8a2 	bl	b40b4 <__cxa_guard_acquire>
   b5f70:	9901      	ldr	r1, [sp, #4]
   b5f72:	b148      	cbz	r0, b5f88 <_Z16_fetch_usbserialv+0x38>
   b5f74:	aa03      	add	r2, sp, #12
   b5f76:	4807      	ldr	r0, [pc, #28]	; (b5f94 <_Z16_fetch_usbserialv+0x44>)
   b5f78:	f7ff ffca 	bl	b5f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5f7c:	4620      	mov	r0, r4
   b5f7e:	f7fe f89e 	bl	b40be <__cxa_guard_release>
   b5f82:	4805      	ldr	r0, [pc, #20]	; (b5f98 <_Z16_fetch_usbserialv+0x48>)
   b5f84:	f000 f9dc 	bl	b6340 <atexit>
	return _usbserial;
}
   b5f88:	4802      	ldr	r0, [pc, #8]	; (b5f94 <_Z16_fetch_usbserialv+0x44>)
   b5f8a:	b008      	add	sp, #32
   b5f8c:	bd10      	pop	{r4, pc}
   b5f8e:	bf00      	nop
   b5f90:	2003e700 	.word	0x2003e700
   b5f94:	2003e704 	.word	0x2003e704
   b5f98:	000b5e99 	.word	0x000b5e99

000b5f9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5f9c:	2200      	movs	r2, #0
   b5f9e:	6840      	ldr	r0, [r0, #4]
   b5fa0:	4611      	mov	r1, r2
   b5fa2:	f7ff bb7b 	b.w	b569c <network_ready>

000b5fa6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5fa6:	2200      	movs	r2, #0
   b5fa8:	6840      	ldr	r0, [r0, #4]
   b5faa:	4611      	mov	r1, r2
   b5fac:	f7ff bb96 	b.w	b56dc <network_listening>

000b5fb0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5fb0:	2200      	movs	r2, #0
   b5fb2:	6840      	ldr	r0, [r0, #4]
   b5fb4:	4611      	mov	r1, r2
   b5fb6:	f7ff bba1 	b.w	b56fc <network_get_listen_timeout>

000b5fba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5fba:	6840      	ldr	r0, [r0, #4]
   b5fbc:	2200      	movs	r2, #0
   b5fbe:	f7ff bb95 	b.w	b56ec <network_set_listen_timeout>

000b5fc2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5fc2:	6840      	ldr	r0, [r0, #4]
   b5fc4:	2200      	movs	r2, #0
   b5fc6:	f081 0101 	eor.w	r1, r1, #1
   b5fca:	f7ff bb7f 	b.w	b56cc <network_listen>

000b5fce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5fce:	2300      	movs	r3, #0
   b5fd0:	6840      	ldr	r0, [r0, #4]
   b5fd2:	461a      	mov	r2, r3
   b5fd4:	4619      	mov	r1, r3
   b5fd6:	f7ff bb71 	b.w	b56bc <network_off>

000b5fda <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5fda:	2300      	movs	r3, #0
   b5fdc:	6840      	ldr	r0, [r0, #4]
   b5fde:	461a      	mov	r2, r3
   b5fe0:	4619      	mov	r1, r3
   b5fe2:	f7ff bb63 	b.w	b56ac <network_on>

000b5fe6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5fe6:	2200      	movs	r2, #0
   b5fe8:	6840      	ldr	r0, [r0, #4]
   b5fea:	4611      	mov	r1, r2
   b5fec:	f7ff bb46 	b.w	b567c <network_connecting>

000b5ff0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ff0:	6840      	ldr	r0, [r0, #4]
   b5ff2:	2200      	movs	r2, #0
   b5ff4:	2102      	movs	r1, #2
   b5ff6:	f7ff bb49 	b.w	b568c <network_disconnect>

000b5ffa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5ffa:	2300      	movs	r3, #0
   b5ffc:	6840      	ldr	r0, [r0, #4]
   b5ffe:	461a      	mov	r2, r3
   b6000:	f7ff bb34 	b.w	b566c <network_connect>

000b6004 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6004:	4b02      	ldr	r3, [pc, #8]	; (b6010 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6006:	2204      	movs	r2, #4
   b6008:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b600a:	4a02      	ldr	r2, [pc, #8]	; (b6014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b600c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b600e:	4770      	bx	lr
   b6010:	2003e718 	.word	0x2003e718
   b6014:	000b714c 	.word	0x000b714c

000b6018 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6018:	4b01      	ldr	r3, [pc, #4]	; (b6020 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b601a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b601c:	4770      	bx	lr
   b601e:	bf00      	nop
   b6020:	2003e5d4 	.word	0x2003e5d4

000b6024 <serialEventRun>:
{
   b6024:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6026:	4b0b      	ldr	r3, [pc, #44]	; (b6054 <serialEventRun+0x30>)
   b6028:	b143      	cbz	r3, b603c <serialEventRun+0x18>
   b602a:	f7ff ff91 	bl	b5f50 <_Z16_fetch_usbserialv>
   b602e:	6803      	ldr	r3, [r0, #0]
   b6030:	691b      	ldr	r3, [r3, #16]
   b6032:	4798      	blx	r3
   b6034:	2800      	cmp	r0, #0
   b6036:	dd01      	ble.n	b603c <serialEventRun+0x18>
        serialEvent();
   b6038:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b603c:	4b06      	ldr	r3, [pc, #24]	; (b6058 <serialEventRun+0x34>)
   b603e:	b143      	cbz	r3, b6052 <serialEventRun+0x2e>
   b6040:	f000 f958 	bl	b62f4 <_Z22__fetch_global_Serial1v>
   b6044:	6803      	ldr	r3, [r0, #0]
   b6046:	691b      	ldr	r3, [r3, #16]
   b6048:	4798      	blx	r3
   b604a:	2800      	cmp	r0, #0
   b604c:	dd01      	ble.n	b6052 <serialEventRun+0x2e>
        serialEvent1();
   b604e:	f3af 8000 	nop.w
}
   b6052:	bd08      	pop	{r3, pc}
	...

000b605c <_post_loop>:
{
   b605c:	b508      	push	{r3, lr}
	serialEventRun();
   b605e:	f7ff ffe1 	bl	b6024 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6062:	f7ff f967 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6066:	4b01      	ldr	r3, [pc, #4]	; (b606c <_post_loop+0x10>)
   b6068:	6018      	str	r0, [r3, #0]
}
   b606a:	bd08      	pop	{r3, pc}
   b606c:	2003e728 	.word	0x2003e728

000b6070 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6070:	4805      	ldr	r0, [pc, #20]	; (b6088 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6072:	4a06      	ldr	r2, [pc, #24]	; (b608c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6074:	4906      	ldr	r1, [pc, #24]	; (b6090 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6076:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6078:	1a12      	subs	r2, r2, r0
   b607a:	f000 f967 	bl	b634c <memcpy>
    __backup_sram_signature = signature;
   b607e:	4b05      	ldr	r3, [pc, #20]	; (b6094 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6080:	4a05      	ldr	r2, [pc, #20]	; (b6098 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6082:	601a      	str	r2, [r3, #0]
}
   b6084:	bd08      	pop	{r3, pc}
   b6086:	bf00      	nop
   b6088:	2003f400 	.word	0x2003f400
   b608c:	2003f404 	.word	0x2003f404
   b6090:	000b7244 	.word	0x000b7244
   b6094:	2003f400 	.word	0x2003f400
   b6098:	9a271c1e 	.word	0x9a271c1e

000b609c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b609c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b609e:	2300      	movs	r3, #0
   b60a0:	9300      	str	r3, [sp, #0]
   b60a2:	461a      	mov	r2, r3
   b60a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60a8:	f7ff face 	bl	b5648 <system_ctrl_set_result>
}
   b60ac:	b003      	add	sp, #12
   b60ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b60b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b60b6:	8843      	ldrh	r3, [r0, #2]
   b60b8:	2b0a      	cmp	r3, #10
   b60ba:	d008      	beq.n	b60ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b60bc:	2b50      	cmp	r3, #80	; 0x50
   b60be:	d10b      	bne.n	b60d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b60c0:	4b09      	ldr	r3, [pc, #36]	; (b60e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b60c2:	681b      	ldr	r3, [r3, #0]
   b60c4:	b14b      	cbz	r3, b60da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b60c6:	b003      	add	sp, #12
   b60c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b60cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b60ce:	f7ff ffe5 	bl	b609c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b60d2:	b003      	add	sp, #12
   b60d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60d8:	2300      	movs	r3, #0
   b60da:	9300      	str	r3, [sp, #0]
   b60dc:	461a      	mov	r2, r3
   b60de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60e2:	f7ff fab1 	bl	b5648 <system_ctrl_set_result>
}
   b60e6:	e7f4      	b.n	b60d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b60e8:	2003e724 	.word	0x2003e724

000b60ec <module_user_init_hook>:
{
   b60ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b60ee:	4812      	ldr	r0, [pc, #72]	; (b6138 <module_user_init_hook+0x4c>)
   b60f0:	2100      	movs	r1, #0
   b60f2:	f7ff fb3b 	bl	b576c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b60f6:	4b11      	ldr	r3, [pc, #68]	; (b613c <module_user_init_hook+0x50>)
   b60f8:	681a      	ldr	r2, [r3, #0]
   b60fa:	4b11      	ldr	r3, [pc, #68]	; (b6140 <module_user_init_hook+0x54>)
   b60fc:	429a      	cmp	r2, r3
   b60fe:	4b11      	ldr	r3, [pc, #68]	; (b6144 <module_user_init_hook+0x58>)
   b6100:	bf0c      	ite	eq
   b6102:	2201      	moveq	r2, #1
   b6104:	2200      	movne	r2, #0
   b6106:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6108:	d001      	beq.n	b610e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b610a:	f7ff ffb1 	bl	b6070 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b610e:	f7ff f901 	bl	b5314 <HAL_RNG_GetRandomNumber>
   b6112:	4604      	mov	r4, r0
    srand(seed);
   b6114:	f000 f930 	bl	b6378 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6118:	4b0b      	ldr	r3, [pc, #44]	; (b6148 <module_user_init_hook+0x5c>)
   b611a:	b113      	cbz	r3, b6122 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b611c:	4620      	mov	r0, r4
   b611e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6122:	2100      	movs	r1, #0
   b6124:	4808      	ldr	r0, [pc, #32]	; (b6148 <module_user_init_hook+0x5c>)
   b6126:	f7ff fa99 	bl	b565c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b612a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b612e:	4807      	ldr	r0, [pc, #28]	; (b614c <module_user_init_hook+0x60>)
   b6130:	2100      	movs	r1, #0
   b6132:	f7ff ba7f 	b.w	b5634 <system_ctrl_set_app_request_handler>
   b6136:	bf00      	nop
   b6138:	000b6019 	.word	0x000b6019
   b613c:	2003f400 	.word	0x2003f400
   b6140:	9a271c1e 	.word	0x9a271c1e
   b6144:	2003e720 	.word	0x2003e720
   b6148:	00000000 	.word	0x00000000
   b614c:	000b60b5 	.word	0x000b60b5

000b6150 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6150:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6152:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6154:	d902      	bls.n	b615c <pinAvailable+0xc>
    return false;
   b6156:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6158:	b002      	add	sp, #8
   b615a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b615c:	f1a0 030b 	sub.w	r3, r0, #11
   b6160:	2b02      	cmp	r3, #2
   b6162:	d81a      	bhi.n	b619a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6164:	4c17      	ldr	r4, [pc, #92]	; (b61c4 <pinAvailable+0x74>)
   b6166:	7821      	ldrb	r1, [r4, #0]
   b6168:	f3bf 8f5b 	dmb	ish
   b616c:	f011 0101 	ands.w	r1, r1, #1
   b6170:	d10b      	bne.n	b618a <pinAvailable+0x3a>
   b6172:	4620      	mov	r0, r4
   b6174:	9101      	str	r1, [sp, #4]
   b6176:	f7fd ff9d 	bl	b40b4 <__cxa_guard_acquire>
   b617a:	9901      	ldr	r1, [sp, #4]
   b617c:	b128      	cbz	r0, b618a <pinAvailable+0x3a>
   b617e:	4812      	ldr	r0, [pc, #72]	; (b61c8 <pinAvailable+0x78>)
   b6180:	f7ff fd64 	bl	b5c4c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6184:	4620      	mov	r0, r4
   b6186:	f7fd ff9a 	bl	b40be <__cxa_guard_release>
   b618a:	4b0f      	ldr	r3, [pc, #60]	; (b61c8 <pinAvailable+0x78>)
   b618c:	7818      	ldrb	r0, [r3, #0]
   b618e:	f7ff f981 	bl	b5494 <hal_spi_is_enabled>
   b6192:	2800      	cmp	r0, #0
   b6194:	d1df      	bne.n	b6156 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6196:	2001      	movs	r0, #1
   b6198:	e7de      	b.n	b6158 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b619a:	2801      	cmp	r0, #1
   b619c:	d809      	bhi.n	b61b2 <pinAvailable+0x62>
   b619e:	f000 f869 	bl	b6274 <_Z19__fetch_global_Wirev>
   b61a2:	2100      	movs	r1, #0
   b61a4:	7c00      	ldrb	r0, [r0, #16]
   b61a6:	f7ff f935 	bl	b5414 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b61aa:	f080 0001 	eor.w	r0, r0, #1
   b61ae:	b2c0      	uxtb	r0, r0
   b61b0:	e7d2      	b.n	b6158 <pinAvailable+0x8>
   b61b2:	3809      	subs	r0, #9
   b61b4:	2801      	cmp	r0, #1
   b61b6:	d8ee      	bhi.n	b6196 <pinAvailable+0x46>
   b61b8:	f000 f89c 	bl	b62f4 <_Z22__fetch_global_Serial1v>
   b61bc:	7c00      	ldrb	r0, [r0, #16]
   b61be:	f7ff f9b9 	bl	b5534 <hal_usart_is_enabled>
   b61c2:	e7f2      	b.n	b61aa <pinAvailable+0x5a>
   b61c4:	2003e6b8 	.word	0x2003e6b8
   b61c8:	2003e6bc 	.word	0x2003e6bc

000b61cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b61cc:	2823      	cmp	r0, #35	; 0x23
{
   b61ce:	b538      	push	{r3, r4, r5, lr}
   b61d0:	4604      	mov	r4, r0
   b61d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b61d4:	d80a      	bhi.n	b61ec <pinMode+0x20>
   b61d6:	29ff      	cmp	r1, #255	; 0xff
   b61d8:	d008      	beq.n	b61ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b61da:	f7ff ffb9 	bl	b6150 <pinAvailable>
   b61de:	b128      	cbz	r0, b61ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b61e0:	4629      	mov	r1, r5
   b61e2:	4620      	mov	r0, r4
}
   b61e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b61e8:	f7ff b8ac 	b.w	b5344 <HAL_Pin_Mode>
}
   b61ec:	bd38      	pop	{r3, r4, r5, pc}

000b61ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b61ee:	b538      	push	{r3, r4, r5, lr}
   b61f0:	4604      	mov	r4, r0
   b61f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b61f4:	f7ff f8ae 	bl	b5354 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b61f8:	28ff      	cmp	r0, #255	; 0xff
   b61fa:	d010      	beq.n	b621e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b61fc:	2806      	cmp	r0, #6
   b61fe:	d804      	bhi.n	b620a <digitalWrite+0x1c>
   b6200:	234d      	movs	r3, #77	; 0x4d
   b6202:	fa23 f000 	lsr.w	r0, r3, r0
   b6206:	07c3      	lsls	r3, r0, #31
   b6208:	d409      	bmi.n	b621e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b620a:	4620      	mov	r0, r4
   b620c:	f7ff ffa0 	bl	b6150 <pinAvailable>
   b6210:	b128      	cbz	r0, b621e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6212:	4629      	mov	r1, r5
   b6214:	4620      	mov	r0, r4
}
   b6216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b621a:	f7ff b8a3 	b.w	b5364 <HAL_GPIO_Write>
}
   b621e:	bd38      	pop	{r3, r4, r5, pc}

000b6220 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6220:	b510      	push	{r4, lr}
   b6222:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6224:	f7ff f896 	bl	b5354 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6228:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b622a:	b2db      	uxtb	r3, r3
   b622c:	2b01      	cmp	r3, #1
   b622e:	d908      	bls.n	b6242 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6230:	4620      	mov	r0, r4
   b6232:	f7ff ff8d 	bl	b6150 <pinAvailable>
   b6236:	b120      	cbz	r0, b6242 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6238:	4620      	mov	r0, r4
}
   b623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b623e:	f7ff b899 	b.w	b5374 <HAL_GPIO_Read>
}
   b6242:	2000      	movs	r0, #0
   b6244:	bd10      	pop	{r4, pc}

000b6246 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6246:	4770      	bx	lr

000b6248 <_Z17acquireWireBufferv>:
{
   b6248:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b624a:	2520      	movs	r5, #32
   b624c:	2314      	movs	r3, #20
{
   b624e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6250:	6003      	str	r3, [r0, #0]
   b6252:	6085      	str	r5, [r0, #8]
   b6254:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6256:	4906      	ldr	r1, [pc, #24]	; (b6270 <_Z17acquireWireBufferv+0x28>)
   b6258:	4628      	mov	r0, r5
   b625a:	f000 f86f 	bl	b633c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b625e:	4904      	ldr	r1, [pc, #16]	; (b6270 <_Z17acquireWireBufferv+0x28>)
	};
   b6260:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6262:	4628      	mov	r0, r5
   b6264:	f000 f86a 	bl	b633c <_ZnajRKSt9nothrow_t>
	};
   b6268:	60e0      	str	r0, [r4, #12]
}
   b626a:	4620      	mov	r0, r4
   b626c:	bd38      	pop	{r3, r4, r5, pc}
   b626e:	bf00      	nop
   b6270:	000b7180 	.word	0x000b7180

000b6274 <_Z19__fetch_global_Wirev>:
{
   b6274:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6276:	4d0e      	ldr	r5, [pc, #56]	; (b62b0 <_Z19__fetch_global_Wirev+0x3c>)
   b6278:	7829      	ldrb	r1, [r5, #0]
   b627a:	f3bf 8f5b 	dmb	ish
   b627e:	f011 0401 	ands.w	r4, r1, #1
{
   b6282:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6284:	d111      	bne.n	b62aa <_Z19__fetch_global_Wirev+0x36>
   b6286:	4628      	mov	r0, r5
   b6288:	f7fd ff14 	bl	b40b4 <__cxa_guard_acquire>
   b628c:	b168      	cbz	r0, b62aa <_Z19__fetch_global_Wirev+0x36>
   b628e:	a801      	add	r0, sp, #4
   b6290:	f7ff ffda 	bl	b6248 <_Z17acquireWireBufferv>
   b6294:	aa01      	add	r2, sp, #4
   b6296:	4621      	mov	r1, r4
   b6298:	4806      	ldr	r0, [pc, #24]	; (b62b4 <_Z19__fetch_global_Wirev+0x40>)
   b629a:	f7ff fae5 	bl	b5868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b629e:	4628      	mov	r0, r5
   b62a0:	f7fd ff0d 	bl	b40be <__cxa_guard_release>
   b62a4:	4804      	ldr	r0, [pc, #16]	; (b62b8 <_Z19__fetch_global_Wirev+0x44>)
   b62a6:	f000 f84b 	bl	b6340 <atexit>
	return wire;
}
   b62aa:	4802      	ldr	r0, [pc, #8]	; (b62b4 <_Z19__fetch_global_Wirev+0x40>)
   b62ac:	b007      	add	sp, #28
   b62ae:	bd30      	pop	{r4, r5, pc}
   b62b0:	2003e72c 	.word	0x2003e72c
   b62b4:	2003e730 	.word	0x2003e730
   b62b8:	000b6247 	.word	0x000b6247

000b62bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b62bc:	4770      	bx	lr
	...

000b62c0 <_Z20acquireSerial1Bufferv>:
{
   b62c0:	b538      	push	{r3, r4, r5, lr}
   b62c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b62c4:	2514      	movs	r5, #20
   b62c6:	462a      	mov	r2, r5
   b62c8:	2100      	movs	r1, #0
   b62ca:	f000 f84d 	bl	b6368 <memset>
   b62ce:	8025      	strh	r5, [r4, #0]
   b62d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b62d2:	4907      	ldr	r1, [pc, #28]	; (b62f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b62d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b62d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b62d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b62da:	f000 f82f 	bl	b633c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b62de:	4904      	ldr	r1, [pc, #16]	; (b62f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b62e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b62e2:	4628      	mov	r0, r5
   b62e4:	f000 f82a 	bl	b633c <_ZnajRKSt9nothrow_t>
    };
   b62e8:	60e0      	str	r0, [r4, #12]
}
   b62ea:	4620      	mov	r0, r4
   b62ec:	bd38      	pop	{r3, r4, r5, pc}
   b62ee:	bf00      	nop
   b62f0:	000b7180 	.word	0x000b7180

000b62f4 <_Z22__fetch_global_Serial1v>:
{
   b62f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b62f6:	4d0e      	ldr	r5, [pc, #56]	; (b6330 <_Z22__fetch_global_Serial1v+0x3c>)
   b62f8:	7829      	ldrb	r1, [r5, #0]
   b62fa:	f3bf 8f5b 	dmb	ish
   b62fe:	f011 0401 	ands.w	r4, r1, #1
{
   b6302:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6304:	d111      	bne.n	b632a <_Z22__fetch_global_Serial1v+0x36>
   b6306:	4628      	mov	r0, r5
   b6308:	f7fd fed4 	bl	b40b4 <__cxa_guard_acquire>
   b630c:	b168      	cbz	r0, b632a <_Z22__fetch_global_Serial1v+0x36>
   b630e:	a801      	add	r0, sp, #4
   b6310:	f7ff ffd6 	bl	b62c0 <_Z20acquireSerial1Bufferv>
   b6314:	aa01      	add	r2, sp, #4
   b6316:	4621      	mov	r1, r4
   b6318:	4806      	ldr	r0, [pc, #24]	; (b6334 <_Z22__fetch_global_Serial1v+0x40>)
   b631a:	f7ff fd9d 	bl	b5e58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b631e:	4628      	mov	r0, r5
   b6320:	f7fd fecd 	bl	b40be <__cxa_guard_release>
   b6324:	4804      	ldr	r0, [pc, #16]	; (b6338 <_Z22__fetch_global_Serial1v+0x44>)
   b6326:	f000 f80b 	bl	b6340 <atexit>
    return serial1;
}
   b632a:	4802      	ldr	r0, [pc, #8]	; (b6334 <_Z22__fetch_global_Serial1v+0x40>)
   b632c:	b007      	add	sp, #28
   b632e:	bd30      	pop	{r4, r5, pc}
   b6330:	2003e744 	.word	0x2003e744
   b6334:	2003e748 	.word	0x2003e748
   b6338:	000b62bd 	.word	0x000b62bd

000b633c <_ZnajRKSt9nothrow_t>:
   b633c:	f7fd bea9 	b.w	b4092 <_Znaj>

000b6340 <atexit>:
   b6340:	2300      	movs	r3, #0
   b6342:	4601      	mov	r1, r0
   b6344:	461a      	mov	r2, r3
   b6346:	4618      	mov	r0, r3
   b6348:	f000 b84c 	b.w	b63e4 <__register_exitproc>

000b634c <memcpy>:
   b634c:	440a      	add	r2, r1
   b634e:	4291      	cmp	r1, r2
   b6350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6354:	d100      	bne.n	b6358 <memcpy+0xc>
   b6356:	4770      	bx	lr
   b6358:	b510      	push	{r4, lr}
   b635a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b635e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6362:	4291      	cmp	r1, r2
   b6364:	d1f9      	bne.n	b635a <memcpy+0xe>
   b6366:	bd10      	pop	{r4, pc}

000b6368 <memset>:
   b6368:	4402      	add	r2, r0
   b636a:	4603      	mov	r3, r0
   b636c:	4293      	cmp	r3, r2
   b636e:	d100      	bne.n	b6372 <memset+0xa>
   b6370:	4770      	bx	lr
   b6372:	f803 1b01 	strb.w	r1, [r3], #1
   b6376:	e7f9      	b.n	b636c <memset+0x4>

000b6378 <srand>:
   b6378:	b538      	push	{r3, r4, r5, lr}
   b637a:	4b10      	ldr	r3, [pc, #64]	; (b63bc <srand+0x44>)
   b637c:	681d      	ldr	r5, [r3, #0]
   b637e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6380:	4604      	mov	r4, r0
   b6382:	b9b3      	cbnz	r3, b63b2 <srand+0x3a>
   b6384:	2018      	movs	r0, #24
   b6386:	f7ff f9d1 	bl	b572c <malloc>
   b638a:	4602      	mov	r2, r0
   b638c:	63a8      	str	r0, [r5, #56]	; 0x38
   b638e:	b920      	cbnz	r0, b639a <srand+0x22>
   b6390:	4b0b      	ldr	r3, [pc, #44]	; (b63c0 <srand+0x48>)
   b6392:	480c      	ldr	r0, [pc, #48]	; (b63c4 <srand+0x4c>)
   b6394:	2142      	movs	r1, #66	; 0x42
   b6396:	f7ff f9e1 	bl	b575c <__assert_func>
   b639a:	490b      	ldr	r1, [pc, #44]	; (b63c8 <srand+0x50>)
   b639c:	4b0b      	ldr	r3, [pc, #44]	; (b63cc <srand+0x54>)
   b639e:	e9c0 1300 	strd	r1, r3, [r0]
   b63a2:	4b0b      	ldr	r3, [pc, #44]	; (b63d0 <srand+0x58>)
   b63a4:	6083      	str	r3, [r0, #8]
   b63a6:	230b      	movs	r3, #11
   b63a8:	8183      	strh	r3, [r0, #12]
   b63aa:	2100      	movs	r1, #0
   b63ac:	2001      	movs	r0, #1
   b63ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b63b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63b4:	2200      	movs	r2, #0
   b63b6:	611c      	str	r4, [r3, #16]
   b63b8:	615a      	str	r2, [r3, #20]
   b63ba:	bd38      	pop	{r3, r4, r5, pc}
   b63bc:	2003e5d4 	.word	0x2003e5d4
   b63c0:	000b7181 	.word	0x000b7181
   b63c4:	000b7198 	.word	0x000b7198
   b63c8:	abcd330e 	.word	0xabcd330e
   b63cc:	e66d1234 	.word	0xe66d1234
   b63d0:	0005deec 	.word	0x0005deec

000b63d4 <strlen>:
   b63d4:	4603      	mov	r3, r0
   b63d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b63da:	2a00      	cmp	r2, #0
   b63dc:	d1fb      	bne.n	b63d6 <strlen+0x2>
   b63de:	1a18      	subs	r0, r3, r0
   b63e0:	3801      	subs	r0, #1
   b63e2:	4770      	bx	lr

000b63e4 <__register_exitproc>:
   b63e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b63e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b64a4 <__register_exitproc+0xc0>
   b63ec:	4606      	mov	r6, r0
   b63ee:	f8d8 0000 	ldr.w	r0, [r8]
   b63f2:	461f      	mov	r7, r3
   b63f4:	460d      	mov	r5, r1
   b63f6:	4691      	mov	r9, r2
   b63f8:	f000 f856 	bl	b64a8 <__retarget_lock_acquire_recursive>
   b63fc:	4b25      	ldr	r3, [pc, #148]	; (b6494 <__register_exitproc+0xb0>)
   b63fe:	681c      	ldr	r4, [r3, #0]
   b6400:	b934      	cbnz	r4, b6410 <__register_exitproc+0x2c>
   b6402:	4c25      	ldr	r4, [pc, #148]	; (b6498 <__register_exitproc+0xb4>)
   b6404:	601c      	str	r4, [r3, #0]
   b6406:	4b25      	ldr	r3, [pc, #148]	; (b649c <__register_exitproc+0xb8>)
   b6408:	b113      	cbz	r3, b6410 <__register_exitproc+0x2c>
   b640a:	681b      	ldr	r3, [r3, #0]
   b640c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6410:	6863      	ldr	r3, [r4, #4]
   b6412:	2b1f      	cmp	r3, #31
   b6414:	dd07      	ble.n	b6426 <__register_exitproc+0x42>
   b6416:	f8d8 0000 	ldr.w	r0, [r8]
   b641a:	f000 f847 	bl	b64ac <__retarget_lock_release_recursive>
   b641e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6426:	b34e      	cbz	r6, b647c <__register_exitproc+0x98>
   b6428:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b642c:	b988      	cbnz	r0, b6452 <__register_exitproc+0x6e>
   b642e:	4b1c      	ldr	r3, [pc, #112]	; (b64a0 <__register_exitproc+0xbc>)
   b6430:	b923      	cbnz	r3, b643c <__register_exitproc+0x58>
   b6432:	f8d8 0000 	ldr.w	r0, [r8]
   b6436:	f000 f838 	bl	b64aa <__retarget_lock_release>
   b643a:	e7f0      	b.n	b641e <__register_exitproc+0x3a>
   b643c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6440:	f7ff f974 	bl	b572c <malloc>
   b6444:	2800      	cmp	r0, #0
   b6446:	d0f4      	beq.n	b6432 <__register_exitproc+0x4e>
   b6448:	2300      	movs	r3, #0
   b644a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b644e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6452:	6863      	ldr	r3, [r4, #4]
   b6454:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6458:	2201      	movs	r2, #1
   b645a:	409a      	lsls	r2, r3
   b645c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6460:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6464:	4313      	orrs	r3, r2
   b6466:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b646a:	2e02      	cmp	r6, #2
   b646c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6470:	bf02      	ittt	eq
   b6472:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6476:	4313      	orreq	r3, r2
   b6478:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b647c:	6863      	ldr	r3, [r4, #4]
   b647e:	f8d8 0000 	ldr.w	r0, [r8]
   b6482:	1c5a      	adds	r2, r3, #1
   b6484:	3302      	adds	r3, #2
   b6486:	6062      	str	r2, [r4, #4]
   b6488:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b648c:	f000 f80e 	bl	b64ac <__retarget_lock_release_recursive>
   b6490:	2000      	movs	r0, #0
   b6492:	e7c6      	b.n	b6422 <__register_exitproc+0x3e>
   b6494:	2003e7e8 	.word	0x2003e7e8
   b6498:	2003e75c 	.word	0x2003e75c
   b649c:	00000000 	.word	0x00000000
   b64a0:	000b572d 	.word	0x000b572d
   b64a4:	2003e638 	.word	0x2003e638

000b64a8 <__retarget_lock_acquire_recursive>:
   b64a8:	4770      	bx	lr

000b64aa <__retarget_lock_release>:
   b64aa:	4770      	bx	lr

000b64ac <__retarget_lock_release_recursive>:
   b64ac:	4770      	bx	lr

000b64ae <link_code_end>:
	...

000b64b0 <dynalib_user>:
   b64b0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b64c0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b64d0:	7620 7269 7574 6c61 3f00                      virtual.?.

000b64db <_ZL4font>:
   b64db:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b64eb:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b64fb:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b650b:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b651b:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b652b:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b653b:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b654b:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b655b:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b656b:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b657b:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b658b:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b659b:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b65ab:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b65bb:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b65cb:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b65db:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b65eb:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b65fb:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b660b:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b661b:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b662b:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b663b:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b664b:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b665b:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b666b:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b667b:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b668b:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b669b:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b66ab:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b66bb:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b66cb:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b66db:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b66eb:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b66fb:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b670b:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b671b:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b672b:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b673b:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b674b:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b675b:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b676b:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b677b:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b678b:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b679b:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b67ab:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b67bb:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b67cb:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b67db:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b67eb:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b67fb:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b680b:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b681b:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b682b:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b683b:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b684b:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b685b:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b686b:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b687b:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b688b:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b689b:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b68ab:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b68bb:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b68cb:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b68db:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b68eb:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b68fb:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b690b:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b691b:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b692b:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b693b:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b694b:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b695b:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b696b:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b697b:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b698b:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b699b:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b69ab:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b69bb:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b69cb:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b69dc <_ZTV12Adafruit_GFX>:
	...
   b69ec:	486d 000b 5b21 000b 409d 000b 4273 000b     mH..![...@..sB..
   b69fc:	4275 000b 42a7 000b 4283 000b 4295 000b     uB...B...B...B..
   b6a0c:	41b5 000b 4273 000b 449f 000b 449d 000b     .A..sB...D...D..
   b6a1c:	42bf 000b 42fd 000b 4337 000b 437d 000b     .B...B..7C..}C..
   b6a2c:	4399 000b 441d 000b 6564 6166 6c75 2074     .C...D..default 
   b6a3c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b6a4c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b6a5c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b6a6c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b6a78 <_ZTVN8particle11SPISettingsE>:
	...
   b6a80:	49a9 000b 497b 000b 497d 000b               .I..{I..}I..

000b6a8c <_ZL12splash1_data>:
   b6a8c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b6a9c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b6aac:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b6abc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b6acc:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b6adc:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b6af4:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b6b04:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b6b14:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b6b24:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b6b34:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b6b44:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b6b54:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b6b64:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b6b74:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b6b84:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b6b94:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b6ba4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b6bb4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b6bc4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b6bd4:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b6be4:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b6bf4:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b6c04:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b6c1c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b6c34:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b6c44:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b6c54:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b6c64:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b6c74:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b6c84:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b6c94:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b6ca4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b6cb4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b6cc4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b6cd4:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b6ce4:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b6cf4:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b6d04:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b6d14:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b6d24:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b6d34:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b6d44:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b6d4c <_ZL12splash2_data>:
   b6d4c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b6d5c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b6d6c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b6d88:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b6d98:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b6da8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b6db8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b6dc8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b6dd8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b6de8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b6df8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b6e08:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b6e18:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b6e28:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b6e38:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b6e48:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b6e58:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b6e68:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b6e78:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b6e88:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b6e98:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b6ea8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b6eb8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b6ec8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b6ee0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b6ef0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b6f00:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b6f10:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b6f20:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b6f2c <_ZTV16Adafruit_SSD1306>:
	...
   b6f34:	49fd 000b 4a15 000b 486d 000b 5b21 000b     .I...J..mH..![..
   b6f44:	4a29 000b 4273 000b 4275 000b 42a7 000b     )J..sB..uB...B..
   b6f54:	4283 000b 4295 000b 41b5 000b 4273 000b     .B...B...A..sB..
   b6f64:	449f 000b 4bc7 000b 516f 000b 5121 000b     .D...K..oQ..!Q..
   b6f74:	4337 000b 437d 000b 4399 000b 441d 000b     7C..}C...C...D..

000b6f84 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b6f84:	8000 e0c0 f8f0 fefc                         ........

000b6f8c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b6f8c:	0100 0703 1f0f 7f3f                         ......?.

000b6f94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b6f94:	d5ae a880                                   ....

000b6f98 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b6f98:	00d3 8d40                                   ..@.

000b6f9c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b6f9c:	0020 c8a1                                    ...

000b6fa0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b6fa0:	40db a6a4 af2e                              .@....

000b6fa6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b6fa6:	02da 8f81                                   ....

000b6faa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b6faa:	12da                                         ...

000b6fad <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b6fad:	02da                                         ...

000b6fb0 <_ZTV16OledWingAdafruit>:
	...
   b6fb8:	5201 000b 5221 000b 486d 000b 5b21 000b     .R..!R..mH..![..
   b6fc8:	4a29 000b 4273 000b 4275 000b 42a7 000b     )J..sB..uB...B..
   b6fd8:	4283 000b 4295 000b 41b5 000b 4273 000b     .B...B...A..sB..
   b6fe8:	449f 000b 4bc7 000b 516f 000b 5121 000b     .D...K..oQ..!Q..
   b6ff8:	4337 000b 437d 000b 4399 000b 441d 000b     7C..}C...C...D..

000b7008 <_ZTVN5spark13EthernetClassE>:
	...
   b7010:	57f3 000b 57e9 000b 57df 000b 57d5 000b     .W...W...W...W..
   b7020:	57c9 000b 57bd 000b 59fd 000b 5a05 000b     .W...W...Y...Z..
   b7030:	57b1 000b 57a9 000b 579f 000b 5795 000b     .W...W...W...W..
   b7040:	5a35 000b                                   5Z..

000b7044 <_ZTV7TwoWire>:
	...
   b704c:	5811 000b 585b 000b 5833 000b 5813 000b     .X..[X..3X...X..
   b705c:	583b 000b 5843 000b 584b 000b 5853 000b     ;X..CX..KX..SX..

000b706c <_ZTV9IPAddress>:
	...
   b7074:	58cd 000b 58bd 000b 58bf 000b 7061 0070     .X...X...X..app.

000b7084 <_ZTVN5spark12NetworkClassE>:
	...
   b708c:	59bd 000b 59c7 000b 59d1 000b 59db 000b     .Y...Y...Y...Y..
   b709c:	59e5 000b 59f1 000b 59fd 000b 5a05 000b     .Y...Y...Y...Z..
   b70ac:	5a0d 000b 5a19 000b 5a21 000b 5a2b 000b     .Z...Z..!Z..+Z..
   b70bc:	5a35 000b                                   5Z..

000b70c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b70c0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b70d0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b70e0:	6d69 0065                                   ime.

000b70e4 <_ZTV11USARTSerial>:
	...
   b70ec:	5ddd 000b 5e49 000b 5e21 000b 5b21 000b     .]..I^..!^..![..
   b70fc:	5df1 000b 5e0d 000b 5dff 000b 5e1b 000b     .]...^...]...^..
   b710c:	5ddf 000b 5de3 000b                         .]...]..

000b7114 <_ZTV9USBSerial>:
	...
   b711c:	5e9b 000b 5f03 000b 5ed9 000b 5b21 000b     .^..._...^..![..
   b712c:	5ecb 000b 5e9d 000b 5ead 000b 5efd 000b     .^...^...^...^..
   b713c:	5ebd 000b 5e95 000b                         .^...^..

000b7144 <_ZTVN5spark9WiFiClassE>:
	...
   b714c:	5ffb 000b 5ff1 000b 5fe7 000b 5f9d 000b     ._..._..._..._..
   b715c:	5fdb 000b 5fcf 000b 59fd 000b 5a05 000b     ._..._...Y...Z..
   b716c:	5fc3 000b 5fbb 000b 5fb1 000b 5fa7 000b     ._..._..._..._..
   b717c:	5a35 000b                                   5Z..

000b7180 <_ZSt7nothrow>:
   b7180:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7190:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b71a0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b71b0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b71c0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b71d0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b71e0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b71f1 <link_const_variable_data_end>:
   b71f1:	00          	.byte	0x00
	...

000b71f4 <link_constructors_location>:
   b71f4:	000b4181 	.word	0x000b4181
   b71f8:	000b5785 	.word	0x000b5785
   b71fc:	000b57fd 	.word	0x000b57fd
   b7200:	000b59ad 	.word	0x000b59ad
   b7204:	000b5b0d 	.word	0x000b5b0d
   b7208:	000b5c35 	.word	0x000b5c35
   b720c:	000b5da5 	.word	0x000b5da5
   b7210:	000b5dc9 	.word	0x000b5dc9
   b7214:	000b6005 	.word	0x000b6005

000b7218 <link_constructors_end>:
	...
